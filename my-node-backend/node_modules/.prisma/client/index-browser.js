
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.15.2
 * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
 */
Prisma.prismaVersion = {
  client: "3.15.2",
  engine: "461d6a05159055555eb7dfb337c9fb271cbd4d7e"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  password: 'password',
  displayName: 'displayName',
  avatarUrl: 'avatarUrl',
  country: 'country',
  dob: 'dob',
  allergies: 'allergies',
  diet: 'diet',
  location: 'location',
  pushNotif: 'pushNotif',
  promoNotif: 'promoNotif',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.KnorrPostScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  content: 'content',
  imageUrl: 'imageUrl',
  imageMimeType: 'imageMimeType',
  hashtags: 'hashtags',
  knorrProducts: 'knorrProducts',
  isRecipe: 'isRecipe',
  prepTime: 'prepTime',
  cookTime: 'cookTime',
  servings: 'servings',
  difficulty: 'difficulty',
  dietType: 'dietType',
  allergens: 'allergens',
  isAllergenFree: 'isAllergenFree',
  views: 'views',
  likes: 'likes',
  shares: 'shares',
  comments: 'comments',
  createdAt: 'createdAt'
});

exports.Prisma.KnorrUserProfileScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  knorrLevel: 'knorrLevel',
  knorrXP: 'knorrXP',
  rewardPoints: 'rewardPoints',
  badges: 'badges',
  followers: 'followers',
  following: 'following',
  likedPosts: 'likedPosts',
  savedPosts: 'savedPosts',
  totalPosts: 'totalPosts',
  totalViews: 'totalViews',
  totalLikes: 'totalLikes',
  totalComments: 'totalComments',
  totalShares: 'totalShares',
  createdAt: 'createdAt'
});

exports.Prisma.CommentScalarFieldEnum = makeEnum({
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  content: 'content',
  createdAt: 'createdAt'
});

exports.Prisma.ShoppingListScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  items: 'items'
});

exports.Prisma.FridgeItemScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  name: 'name',
  quantity: 'quantity',
  expiryDate: 'expiryDate',
  zone: 'zone',
  category: 'category',
  addedAt: 'addedAt'
});

exports.Prisma.StatScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  data: 'data'
});

exports.Prisma.KnorrRewardScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  userId: 'userId'
});

exports.Prisma.UserChallengeScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  challenge: 'challenge'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  KnorrPost: 'KnorrPost',
  KnorrUserProfile: 'KnorrUserProfile',
  Comment: 'Comment',
  ShoppingList: 'ShoppingList',
  FridgeItem: 'FridgeItem',
  Stat: 'Stat',
  KnorrReward: 'KnorrReward',
  UserChallenge: 'UserChallenge'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
