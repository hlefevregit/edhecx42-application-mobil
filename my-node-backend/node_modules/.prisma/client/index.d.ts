
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  email: string
  password: string | null
  displayName: string | null
  avatarUrl: string | null
  country: string | null
  dob: Date | null
  allergies: string | null
  preferences: string | null
  dietStyle: string | null
  productsToAvoid: string | null
  budget: number | null
  createdAt: Date
}

/**
 * Model KnorrPost
 * 
 */
export type KnorrPost = {
  id: string
  userId: string
  content: string | null
  imageUrl: string | null
  imageMimeType: string | null
  hashtags: string | null
  knorrProducts: string | null
  isRecipe: boolean
  prepTime: string | null
  cookTime: string | null
  servings: string | null
  difficulty: string | null
  views: number
  likes: number
  shares: number
  comments: number
  createdAt: Date
}

/**
 * Model KnorrUserProfile
 * 
 */
export type KnorrUserProfile = {
  id: string
  userId: string
  knorrLevel: number
  knorrXP: number
  rewardPoints: number
  badges: string | null
  followers: string | null
  following: string | null
  likedPosts: string | null
  savedPosts: string | null
  totalPosts: number
  totalViews: number
  totalLikes: number
  totalComments: number
  totalShares: number
  createdAt: Date
}

/**
 * Model Comment
 * 
 */
export type Comment = {
  id: string
  postId: string
  userId: string
  content: string
  createdAt: Date
}

/**
 * Model ShoppingList
 * 
 */
export type ShoppingList = {
  id: string
  userId: string
  items: string
}

/**
 * Model FridgeItem
 * 
 */
export type FridgeItem = {
  id: string
  userId: string
  name: string
  quantity: number
  expiryDate: Date | null
  zone: string | null
  category: string | null
  addedAt: Date
}

/**
 * Model Stat
 * 
 */
export type Stat = {
  id: string
  userId: string
  data: string
}

/**
 * Model KnorrReward
 * 
 */
export type KnorrReward = {
  id: string
  name: string
  userId: string
}

/**
 * Model UserChallenge
 * 
 */
export type UserChallenge = {
  id: string
  userId: string
  challenge: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.knorrPost`: Exposes CRUD operations for the **KnorrPost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KnorrPosts
    * const knorrPosts = await prisma.knorrPost.findMany()
    * ```
    */
  get knorrPost(): Prisma.KnorrPostDelegate<GlobalReject>;

  /**
   * `prisma.knorrUserProfile`: Exposes CRUD operations for the **KnorrUserProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KnorrUserProfiles
    * const knorrUserProfiles = await prisma.knorrUserProfile.findMany()
    * ```
    */
  get knorrUserProfile(): Prisma.KnorrUserProfileDelegate<GlobalReject>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<GlobalReject>;

  /**
   * `prisma.shoppingList`: Exposes CRUD operations for the **ShoppingList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShoppingLists
    * const shoppingLists = await prisma.shoppingList.findMany()
    * ```
    */
  get shoppingList(): Prisma.ShoppingListDelegate<GlobalReject>;

  /**
   * `prisma.fridgeItem`: Exposes CRUD operations for the **FridgeItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FridgeItems
    * const fridgeItems = await prisma.fridgeItem.findMany()
    * ```
    */
  get fridgeItem(): Prisma.FridgeItemDelegate<GlobalReject>;

  /**
   * `prisma.stat`: Exposes CRUD operations for the **Stat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stats
    * const stats = await prisma.stat.findMany()
    * ```
    */
  get stat(): Prisma.StatDelegate<GlobalReject>;

  /**
   * `prisma.knorrReward`: Exposes CRUD operations for the **KnorrReward** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KnorrRewards
    * const knorrRewards = await prisma.knorrReward.findMany()
    * ```
    */
  get knorrReward(): Prisma.KnorrRewardDelegate<GlobalReject>;

  /**
   * `prisma.userChallenge`: Exposes CRUD operations for the **UserChallenge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserChallenges
    * const userChallenges = await prisma.userChallenge.findMany()
    * ```
    */
  get userChallenge(): Prisma.UserChallengeDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    KnorrPost: 'KnorrPost',
    KnorrUserProfile: 'KnorrUserProfile',
    Comment: 'Comment',
    ShoppingList: 'ShoppingList',
    FridgeItem: 'FridgeItem',
    Stat: 'Stat',
    KnorrReward: 'KnorrReward',
    UserChallenge: 'UserChallenge'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    knorrPosts: number
    knorrUserProfiles: number
    comments: number
    shoppingLists: number
    fridgeItems: number
    stats: number
    rewards: number
    challenges: number
  }

  export type UserCountOutputTypeSelect = {
    knorrPosts?: boolean
    knorrUserProfiles?: boolean
    comments?: boolean
    shoppingLists?: boolean
    fridgeItems?: boolean
    stats?: boolean
    rewards?: boolean
    challenges?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type KnorrPostCountOutputType
   */


  export type KnorrPostCountOutputType = {
    postComments: number
  }

  export type KnorrPostCountOutputTypeSelect = {
    postComments?: boolean
  }

  export type KnorrPostCountOutputTypeGetPayload<
    S extends boolean | null | undefined | KnorrPostCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? KnorrPostCountOutputType
    : S extends undefined
    ? never
    : S extends KnorrPostCountOutputTypeArgs
    ?'include' extends U
    ? KnorrPostCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof KnorrPostCountOutputType ? KnorrPostCountOutputType[P] : never
  } 
    : KnorrPostCountOutputType
  : KnorrPostCountOutputType




  // Custom InputTypes

  /**
   * KnorrPostCountOutputType without action
   */
  export type KnorrPostCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the KnorrPostCountOutputType
     * 
    **/
    select?: KnorrPostCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    budget: number | null
  }

  export type UserSumAggregateOutputType = {
    budget: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    displayName: string | null
    avatarUrl: string | null
    country: string | null
    dob: Date | null
    allergies: string | null
    preferences: string | null
    dietStyle: string | null
    productsToAvoid: string | null
    budget: number | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    displayName: string | null
    avatarUrl: string | null
    country: string | null
    dob: Date | null
    allergies: string | null
    preferences: string | null
    dietStyle: string | null
    productsToAvoid: string | null
    budget: number | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    displayName: number
    avatarUrl: number
    country: number
    dob: number
    allergies: number
    preferences: number
    dietStyle: number
    productsToAvoid: number
    budget: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    budget?: true
  }

  export type UserSumAggregateInputType = {
    budget?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    displayName?: true
    avatarUrl?: true
    country?: true
    dob?: true
    allergies?: true
    preferences?: true
    dietStyle?: true
    productsToAvoid?: true
    budget?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    displayName?: true
    avatarUrl?: true
    country?: true
    dob?: true
    allergies?: true
    preferences?: true
    dietStyle?: true
    productsToAvoid?: true
    budget?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    displayName?: true
    avatarUrl?: true
    country?: true
    dob?: true
    allergies?: true
    preferences?: true
    dietStyle?: true
    productsToAvoid?: true
    budget?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string | null
    displayName: string | null
    avatarUrl: string | null
    country: string | null
    dob: Date | null
    allergies: string | null
    preferences: string | null
    dietStyle: string | null
    productsToAvoid: string | null
    budget: number | null
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    displayName?: boolean
    avatarUrl?: boolean
    country?: boolean
    dob?: boolean
    allergies?: boolean
    preferences?: boolean
    dietStyle?: boolean
    productsToAvoid?: boolean
    budget?: boolean
    createdAt?: boolean
    knorrPosts?: boolean | KnorrPostFindManyArgs
    knorrUserProfiles?: boolean | KnorrUserProfileFindManyArgs
    comments?: boolean | CommentFindManyArgs
    shoppingLists?: boolean | ShoppingListFindManyArgs
    fridgeItems?: boolean | FridgeItemFindManyArgs
    stats?: boolean | StatFindManyArgs
    rewards?: boolean | KnorrRewardFindManyArgs
    challenges?: boolean | UserChallengeFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    knorrPosts?: boolean | KnorrPostFindManyArgs
    knorrUserProfiles?: boolean | KnorrUserProfileFindManyArgs
    comments?: boolean | CommentFindManyArgs
    shoppingLists?: boolean | ShoppingListFindManyArgs
    fridgeItems?: boolean | FridgeItemFindManyArgs
    stats?: boolean | StatFindManyArgs
    rewards?: boolean | KnorrRewardFindManyArgs
    challenges?: boolean | UserChallengeFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'knorrPosts' ? Array < KnorrPostGetPayload<S['include'][P]>>  :
        P extends 'knorrUserProfiles' ? Array < KnorrUserProfileGetPayload<S['include'][P]>>  :
        P extends 'comments' ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends 'shoppingLists' ? Array < ShoppingListGetPayload<S['include'][P]>>  :
        P extends 'fridgeItems' ? Array < FridgeItemGetPayload<S['include'][P]>>  :
        P extends 'stats' ? Array < StatGetPayload<S['include'][P]>>  :
        P extends 'rewards' ? Array < KnorrRewardGetPayload<S['include'][P]>>  :
        P extends 'challenges' ? Array < UserChallengeGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'knorrPosts' ? Array < KnorrPostGetPayload<S['select'][P]>>  :
        P extends 'knorrUserProfiles' ? Array < KnorrUserProfileGetPayload<S['select'][P]>>  :
        P extends 'comments' ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends 'shoppingLists' ? Array < ShoppingListGetPayload<S['select'][P]>>  :
        P extends 'fridgeItems' ? Array < FridgeItemGetPayload<S['select'][P]>>  :
        P extends 'stats' ? Array < StatGetPayload<S['select'][P]>>  :
        P extends 'rewards' ? Array < KnorrRewardGetPayload<S['select'][P]>>  :
        P extends 'challenges' ? Array < UserChallengeGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    knorrPosts<T extends KnorrPostFindManyArgs = {}>(args?: Subset<T, KnorrPostFindManyArgs>): CheckSelect<T, PrismaPromise<Array<KnorrPost>>, PrismaPromise<Array<KnorrPostGetPayload<T>>>>;

    knorrUserProfiles<T extends KnorrUserProfileFindManyArgs = {}>(args?: Subset<T, KnorrUserProfileFindManyArgs>): CheckSelect<T, PrismaPromise<Array<KnorrUserProfile>>, PrismaPromise<Array<KnorrUserProfileGetPayload<T>>>>;

    comments<T extends CommentFindManyArgs = {}>(args?: Subset<T, CommentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Comment>>, PrismaPromise<Array<CommentGetPayload<T>>>>;

    shoppingLists<T extends ShoppingListFindManyArgs = {}>(args?: Subset<T, ShoppingListFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ShoppingList>>, PrismaPromise<Array<ShoppingListGetPayload<T>>>>;

    fridgeItems<T extends FridgeItemFindManyArgs = {}>(args?: Subset<T, FridgeItemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<FridgeItem>>, PrismaPromise<Array<FridgeItemGetPayload<T>>>>;

    stats<T extends StatFindManyArgs = {}>(args?: Subset<T, StatFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Stat>>, PrismaPromise<Array<StatGetPayload<T>>>>;

    rewards<T extends KnorrRewardFindManyArgs = {}>(args?: Subset<T, KnorrRewardFindManyArgs>): CheckSelect<T, PrismaPromise<Array<KnorrReward>>, PrismaPromise<Array<KnorrRewardGetPayload<T>>>>;

    challenges<T extends UserChallengeFindManyArgs = {}>(args?: Subset<T, UserChallengeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserChallenge>>, PrismaPromise<Array<UserChallengeGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model KnorrPost
   */


  export type AggregateKnorrPost = {
    _count: KnorrPostCountAggregateOutputType | null
    _avg: KnorrPostAvgAggregateOutputType | null
    _sum: KnorrPostSumAggregateOutputType | null
    _min: KnorrPostMinAggregateOutputType | null
    _max: KnorrPostMaxAggregateOutputType | null
  }

  export type KnorrPostAvgAggregateOutputType = {
    views: number | null
    likes: number | null
    shares: number | null
    comments: number | null
  }

  export type KnorrPostSumAggregateOutputType = {
    views: number | null
    likes: number | null
    shares: number | null
    comments: number | null
  }

  export type KnorrPostMinAggregateOutputType = {
    id: string | null
    userId: string | null
    content: string | null
    imageUrl: string | null
    imageMimeType: string | null
    hashtags: string | null
    knorrProducts: string | null
    isRecipe: boolean | null
    prepTime: string | null
    cookTime: string | null
    servings: string | null
    difficulty: string | null
    views: number | null
    likes: number | null
    shares: number | null
    comments: number | null
    createdAt: Date | null
  }

  export type KnorrPostMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    content: string | null
    imageUrl: string | null
    imageMimeType: string | null
    hashtags: string | null
    knorrProducts: string | null
    isRecipe: boolean | null
    prepTime: string | null
    cookTime: string | null
    servings: string | null
    difficulty: string | null
    views: number | null
    likes: number | null
    shares: number | null
    comments: number | null
    createdAt: Date | null
  }

  export type KnorrPostCountAggregateOutputType = {
    id: number
    userId: number
    content: number
    imageUrl: number
    imageMimeType: number
    hashtags: number
    knorrProducts: number
    isRecipe: number
    prepTime: number
    cookTime: number
    servings: number
    difficulty: number
    views: number
    likes: number
    shares: number
    comments: number
    createdAt: number
    _all: number
  }


  export type KnorrPostAvgAggregateInputType = {
    views?: true
    likes?: true
    shares?: true
    comments?: true
  }

  export type KnorrPostSumAggregateInputType = {
    views?: true
    likes?: true
    shares?: true
    comments?: true
  }

  export type KnorrPostMinAggregateInputType = {
    id?: true
    userId?: true
    content?: true
    imageUrl?: true
    imageMimeType?: true
    hashtags?: true
    knorrProducts?: true
    isRecipe?: true
    prepTime?: true
    cookTime?: true
    servings?: true
    difficulty?: true
    views?: true
    likes?: true
    shares?: true
    comments?: true
    createdAt?: true
  }

  export type KnorrPostMaxAggregateInputType = {
    id?: true
    userId?: true
    content?: true
    imageUrl?: true
    imageMimeType?: true
    hashtags?: true
    knorrProducts?: true
    isRecipe?: true
    prepTime?: true
    cookTime?: true
    servings?: true
    difficulty?: true
    views?: true
    likes?: true
    shares?: true
    comments?: true
    createdAt?: true
  }

  export type KnorrPostCountAggregateInputType = {
    id?: true
    userId?: true
    content?: true
    imageUrl?: true
    imageMimeType?: true
    hashtags?: true
    knorrProducts?: true
    isRecipe?: true
    prepTime?: true
    cookTime?: true
    servings?: true
    difficulty?: true
    views?: true
    likes?: true
    shares?: true
    comments?: true
    createdAt?: true
    _all?: true
  }

  export type KnorrPostAggregateArgs = {
    /**
     * Filter which KnorrPost to aggregate.
     * 
    **/
    where?: KnorrPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnorrPosts to fetch.
     * 
    **/
    orderBy?: Enumerable<KnorrPostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: KnorrPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnorrPosts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnorrPosts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KnorrPosts
    **/
    _count?: true | KnorrPostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KnorrPostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KnorrPostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KnorrPostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KnorrPostMaxAggregateInputType
  }

  export type GetKnorrPostAggregateType<T extends KnorrPostAggregateArgs> = {
        [P in keyof T & keyof AggregateKnorrPost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKnorrPost[P]>
      : GetScalarType<T[P], AggregateKnorrPost[P]>
  }




  export type KnorrPostGroupByArgs = {
    where?: KnorrPostWhereInput
    orderBy?: Enumerable<KnorrPostOrderByWithAggregationInput>
    by: Array<KnorrPostScalarFieldEnum>
    having?: KnorrPostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KnorrPostCountAggregateInputType | true
    _avg?: KnorrPostAvgAggregateInputType
    _sum?: KnorrPostSumAggregateInputType
    _min?: KnorrPostMinAggregateInputType
    _max?: KnorrPostMaxAggregateInputType
  }


  export type KnorrPostGroupByOutputType = {
    id: string
    userId: string
    content: string | null
    imageUrl: string | null
    imageMimeType: string | null
    hashtags: string | null
    knorrProducts: string | null
    isRecipe: boolean
    prepTime: string | null
    cookTime: string | null
    servings: string | null
    difficulty: string | null
    views: number
    likes: number
    shares: number
    comments: number
    createdAt: Date
    _count: KnorrPostCountAggregateOutputType | null
    _avg: KnorrPostAvgAggregateOutputType | null
    _sum: KnorrPostSumAggregateOutputType | null
    _min: KnorrPostMinAggregateOutputType | null
    _max: KnorrPostMaxAggregateOutputType | null
  }

  type GetKnorrPostGroupByPayload<T extends KnorrPostGroupByArgs> = PrismaPromise<
    Array<
      PickArray<KnorrPostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KnorrPostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KnorrPostGroupByOutputType[P]>
            : GetScalarType<T[P], KnorrPostGroupByOutputType[P]>
        }
      >
    >


  export type KnorrPostSelect = {
    id?: boolean
    userId?: boolean
    content?: boolean
    imageUrl?: boolean
    imageMimeType?: boolean
    hashtags?: boolean
    knorrProducts?: boolean
    isRecipe?: boolean
    prepTime?: boolean
    cookTime?: boolean
    servings?: boolean
    difficulty?: boolean
    views?: boolean
    likes?: boolean
    shares?: boolean
    comments?: boolean
    createdAt?: boolean
    user?: boolean | UserArgs
    postComments?: boolean | CommentFindManyArgs
    _count?: boolean | KnorrPostCountOutputTypeArgs
  }

  export type KnorrPostInclude = {
    user?: boolean | UserArgs
    postComments?: boolean | CommentFindManyArgs
    _count?: boolean | KnorrPostCountOutputTypeArgs
  }

  export type KnorrPostGetPayload<
    S extends boolean | null | undefined | KnorrPostArgs,
    U = keyof S
      > = S extends true
        ? KnorrPost
    : S extends undefined
    ? never
    : S extends KnorrPostArgs | KnorrPostFindManyArgs
    ?'include' extends U
    ? KnorrPost  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'postComments' ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends '_count' ? KnorrPostCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'postComments' ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends '_count' ? KnorrPostCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof KnorrPost ? KnorrPost[P] : never
  } 
    : KnorrPost
  : KnorrPost


  type KnorrPostCountArgs = Merge<
    Omit<KnorrPostFindManyArgs, 'select' | 'include'> & {
      select?: KnorrPostCountAggregateInputType | true
    }
  >

  export interface KnorrPostDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one KnorrPost that matches the filter.
     * @param {KnorrPostFindUniqueArgs} args - Arguments to find a KnorrPost
     * @example
     * // Get one KnorrPost
     * const knorrPost = await prisma.knorrPost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KnorrPostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, KnorrPostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'KnorrPost'> extends True ? CheckSelect<T, Prisma__KnorrPostClient<KnorrPost>, Prisma__KnorrPostClient<KnorrPostGetPayload<T>>> : CheckSelect<T, Prisma__KnorrPostClient<KnorrPost | null >, Prisma__KnorrPostClient<KnorrPostGetPayload<T> | null >>

    /**
     * Find the first KnorrPost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrPostFindFirstArgs} args - Arguments to find a KnorrPost
     * @example
     * // Get one KnorrPost
     * const knorrPost = await prisma.knorrPost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KnorrPostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, KnorrPostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'KnorrPost'> extends True ? CheckSelect<T, Prisma__KnorrPostClient<KnorrPost>, Prisma__KnorrPostClient<KnorrPostGetPayload<T>>> : CheckSelect<T, Prisma__KnorrPostClient<KnorrPost | null >, Prisma__KnorrPostClient<KnorrPostGetPayload<T> | null >>

    /**
     * Find zero or more KnorrPosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrPostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KnorrPosts
     * const knorrPosts = await prisma.knorrPost.findMany()
     * 
     * // Get first 10 KnorrPosts
     * const knorrPosts = await prisma.knorrPost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const knorrPostWithIdOnly = await prisma.knorrPost.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KnorrPostFindManyArgs>(
      args?: SelectSubset<T, KnorrPostFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<KnorrPost>>, PrismaPromise<Array<KnorrPostGetPayload<T>>>>

    /**
     * Create a KnorrPost.
     * @param {KnorrPostCreateArgs} args - Arguments to create a KnorrPost.
     * @example
     * // Create one KnorrPost
     * const KnorrPost = await prisma.knorrPost.create({
     *   data: {
     *     // ... data to create a KnorrPost
     *   }
     * })
     * 
    **/
    create<T extends KnorrPostCreateArgs>(
      args: SelectSubset<T, KnorrPostCreateArgs>
    ): CheckSelect<T, Prisma__KnorrPostClient<KnorrPost>, Prisma__KnorrPostClient<KnorrPostGetPayload<T>>>

    /**
     * Create many KnorrPosts.
     *     @param {KnorrPostCreateManyArgs} args - Arguments to create many KnorrPosts.
     *     @example
     *     // Create many KnorrPosts
     *     const knorrPost = await prisma.knorrPost.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KnorrPostCreateManyArgs>(
      args?: SelectSubset<T, KnorrPostCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a KnorrPost.
     * @param {KnorrPostDeleteArgs} args - Arguments to delete one KnorrPost.
     * @example
     * // Delete one KnorrPost
     * const KnorrPost = await prisma.knorrPost.delete({
     *   where: {
     *     // ... filter to delete one KnorrPost
     *   }
     * })
     * 
    **/
    delete<T extends KnorrPostDeleteArgs>(
      args: SelectSubset<T, KnorrPostDeleteArgs>
    ): CheckSelect<T, Prisma__KnorrPostClient<KnorrPost>, Prisma__KnorrPostClient<KnorrPostGetPayload<T>>>

    /**
     * Update one KnorrPost.
     * @param {KnorrPostUpdateArgs} args - Arguments to update one KnorrPost.
     * @example
     * // Update one KnorrPost
     * const knorrPost = await prisma.knorrPost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KnorrPostUpdateArgs>(
      args: SelectSubset<T, KnorrPostUpdateArgs>
    ): CheckSelect<T, Prisma__KnorrPostClient<KnorrPost>, Prisma__KnorrPostClient<KnorrPostGetPayload<T>>>

    /**
     * Delete zero or more KnorrPosts.
     * @param {KnorrPostDeleteManyArgs} args - Arguments to filter KnorrPosts to delete.
     * @example
     * // Delete a few KnorrPosts
     * const { count } = await prisma.knorrPost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KnorrPostDeleteManyArgs>(
      args?: SelectSubset<T, KnorrPostDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more KnorrPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrPostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KnorrPosts
     * const knorrPost = await prisma.knorrPost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KnorrPostUpdateManyArgs>(
      args: SelectSubset<T, KnorrPostUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one KnorrPost.
     * @param {KnorrPostUpsertArgs} args - Arguments to update or create a KnorrPost.
     * @example
     * // Update or create a KnorrPost
     * const knorrPost = await prisma.knorrPost.upsert({
     *   create: {
     *     // ... data to create a KnorrPost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KnorrPost we want to update
     *   }
     * })
    **/
    upsert<T extends KnorrPostUpsertArgs>(
      args: SelectSubset<T, KnorrPostUpsertArgs>
    ): CheckSelect<T, Prisma__KnorrPostClient<KnorrPost>, Prisma__KnorrPostClient<KnorrPostGetPayload<T>>>

    /**
     * Count the number of KnorrPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrPostCountArgs} args - Arguments to filter KnorrPosts to count.
     * @example
     * // Count the number of KnorrPosts
     * const count = await prisma.knorrPost.count({
     *   where: {
     *     // ... the filter for the KnorrPosts we want to count
     *   }
     * })
    **/
    count<T extends KnorrPostCountArgs>(
      args?: Subset<T, KnorrPostCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KnorrPostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KnorrPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrPostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KnorrPostAggregateArgs>(args: Subset<T, KnorrPostAggregateArgs>): PrismaPromise<GetKnorrPostAggregateType<T>>

    /**
     * Group by KnorrPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrPostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KnorrPostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KnorrPostGroupByArgs['orderBy'] }
        : { orderBy?: KnorrPostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KnorrPostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKnorrPostGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for KnorrPost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__KnorrPostClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    postComments<T extends CommentFindManyArgs = {}>(args?: Subset<T, CommentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Comment>>, PrismaPromise<Array<CommentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * KnorrPost findUnique
   */
  export type KnorrPostFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the KnorrPost
     * 
    **/
    select?: KnorrPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrPostInclude | null
    /**
     * Throw an Error if a KnorrPost can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which KnorrPost to fetch.
     * 
    **/
    where: KnorrPostWhereUniqueInput
  }


  /**
   * KnorrPost findFirst
   */
  export type KnorrPostFindFirstArgs = {
    /**
     * Select specific fields to fetch from the KnorrPost
     * 
    **/
    select?: KnorrPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrPostInclude | null
    /**
     * Throw an Error if a KnorrPost can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which KnorrPost to fetch.
     * 
    **/
    where?: KnorrPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnorrPosts to fetch.
     * 
    **/
    orderBy?: Enumerable<KnorrPostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KnorrPosts.
     * 
    **/
    cursor?: KnorrPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnorrPosts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnorrPosts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KnorrPosts.
     * 
    **/
    distinct?: Enumerable<KnorrPostScalarFieldEnum>
  }


  /**
   * KnorrPost findMany
   */
  export type KnorrPostFindManyArgs = {
    /**
     * Select specific fields to fetch from the KnorrPost
     * 
    **/
    select?: KnorrPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrPostInclude | null
    /**
     * Filter, which KnorrPosts to fetch.
     * 
    **/
    where?: KnorrPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnorrPosts to fetch.
     * 
    **/
    orderBy?: Enumerable<KnorrPostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KnorrPosts.
     * 
    **/
    cursor?: KnorrPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnorrPosts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnorrPosts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<KnorrPostScalarFieldEnum>
  }


  /**
   * KnorrPost create
   */
  export type KnorrPostCreateArgs = {
    /**
     * Select specific fields to fetch from the KnorrPost
     * 
    **/
    select?: KnorrPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrPostInclude | null
    /**
     * The data needed to create a KnorrPost.
     * 
    **/
    data: XOR<KnorrPostCreateInput, KnorrPostUncheckedCreateInput>
  }


  /**
   * KnorrPost createMany
   */
  export type KnorrPostCreateManyArgs = {
    /**
     * The data used to create many KnorrPosts.
     * 
    **/
    data: Enumerable<KnorrPostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * KnorrPost update
   */
  export type KnorrPostUpdateArgs = {
    /**
     * Select specific fields to fetch from the KnorrPost
     * 
    **/
    select?: KnorrPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrPostInclude | null
    /**
     * The data needed to update a KnorrPost.
     * 
    **/
    data: XOR<KnorrPostUpdateInput, KnorrPostUncheckedUpdateInput>
    /**
     * Choose, which KnorrPost to update.
     * 
    **/
    where: KnorrPostWhereUniqueInput
  }


  /**
   * KnorrPost updateMany
   */
  export type KnorrPostUpdateManyArgs = {
    /**
     * The data used to update KnorrPosts.
     * 
    **/
    data: XOR<KnorrPostUpdateManyMutationInput, KnorrPostUncheckedUpdateManyInput>
    /**
     * Filter which KnorrPosts to update
     * 
    **/
    where?: KnorrPostWhereInput
  }


  /**
   * KnorrPost upsert
   */
  export type KnorrPostUpsertArgs = {
    /**
     * Select specific fields to fetch from the KnorrPost
     * 
    **/
    select?: KnorrPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrPostInclude | null
    /**
     * The filter to search for the KnorrPost to update in case it exists.
     * 
    **/
    where: KnorrPostWhereUniqueInput
    /**
     * In case the KnorrPost found by the `where` argument doesn't exist, create a new KnorrPost with this data.
     * 
    **/
    create: XOR<KnorrPostCreateInput, KnorrPostUncheckedCreateInput>
    /**
     * In case the KnorrPost was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<KnorrPostUpdateInput, KnorrPostUncheckedUpdateInput>
  }


  /**
   * KnorrPost delete
   */
  export type KnorrPostDeleteArgs = {
    /**
     * Select specific fields to fetch from the KnorrPost
     * 
    **/
    select?: KnorrPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrPostInclude | null
    /**
     * Filter which KnorrPost to delete.
     * 
    **/
    where: KnorrPostWhereUniqueInput
  }


  /**
   * KnorrPost deleteMany
   */
  export type KnorrPostDeleteManyArgs = {
    /**
     * Filter which KnorrPosts to delete
     * 
    **/
    where?: KnorrPostWhereInput
  }


  /**
   * KnorrPost without action
   */
  export type KnorrPostArgs = {
    /**
     * Select specific fields to fetch from the KnorrPost
     * 
    **/
    select?: KnorrPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrPostInclude | null
  }



  /**
   * Model KnorrUserProfile
   */


  export type AggregateKnorrUserProfile = {
    _count: KnorrUserProfileCountAggregateOutputType | null
    _avg: KnorrUserProfileAvgAggregateOutputType | null
    _sum: KnorrUserProfileSumAggregateOutputType | null
    _min: KnorrUserProfileMinAggregateOutputType | null
    _max: KnorrUserProfileMaxAggregateOutputType | null
  }

  export type KnorrUserProfileAvgAggregateOutputType = {
    knorrLevel: number | null
    knorrXP: number | null
    rewardPoints: number | null
    totalPosts: number | null
    totalViews: number | null
    totalLikes: number | null
    totalComments: number | null
    totalShares: number | null
  }

  export type KnorrUserProfileSumAggregateOutputType = {
    knorrLevel: number | null
    knorrXP: number | null
    rewardPoints: number | null
    totalPosts: number | null
    totalViews: number | null
    totalLikes: number | null
    totalComments: number | null
    totalShares: number | null
  }

  export type KnorrUserProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    knorrLevel: number | null
    knorrXP: number | null
    rewardPoints: number | null
    badges: string | null
    followers: string | null
    following: string | null
    likedPosts: string | null
    savedPosts: string | null
    totalPosts: number | null
    totalViews: number | null
    totalLikes: number | null
    totalComments: number | null
    totalShares: number | null
    createdAt: Date | null
  }

  export type KnorrUserProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    knorrLevel: number | null
    knorrXP: number | null
    rewardPoints: number | null
    badges: string | null
    followers: string | null
    following: string | null
    likedPosts: string | null
    savedPosts: string | null
    totalPosts: number | null
    totalViews: number | null
    totalLikes: number | null
    totalComments: number | null
    totalShares: number | null
    createdAt: Date | null
  }

  export type KnorrUserProfileCountAggregateOutputType = {
    id: number
    userId: number
    knorrLevel: number
    knorrXP: number
    rewardPoints: number
    badges: number
    followers: number
    following: number
    likedPosts: number
    savedPosts: number
    totalPosts: number
    totalViews: number
    totalLikes: number
    totalComments: number
    totalShares: number
    createdAt: number
    _all: number
  }


  export type KnorrUserProfileAvgAggregateInputType = {
    knorrLevel?: true
    knorrXP?: true
    rewardPoints?: true
    totalPosts?: true
    totalViews?: true
    totalLikes?: true
    totalComments?: true
    totalShares?: true
  }

  export type KnorrUserProfileSumAggregateInputType = {
    knorrLevel?: true
    knorrXP?: true
    rewardPoints?: true
    totalPosts?: true
    totalViews?: true
    totalLikes?: true
    totalComments?: true
    totalShares?: true
  }

  export type KnorrUserProfileMinAggregateInputType = {
    id?: true
    userId?: true
    knorrLevel?: true
    knorrXP?: true
    rewardPoints?: true
    badges?: true
    followers?: true
    following?: true
    likedPosts?: true
    savedPosts?: true
    totalPosts?: true
    totalViews?: true
    totalLikes?: true
    totalComments?: true
    totalShares?: true
    createdAt?: true
  }

  export type KnorrUserProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    knorrLevel?: true
    knorrXP?: true
    rewardPoints?: true
    badges?: true
    followers?: true
    following?: true
    likedPosts?: true
    savedPosts?: true
    totalPosts?: true
    totalViews?: true
    totalLikes?: true
    totalComments?: true
    totalShares?: true
    createdAt?: true
  }

  export type KnorrUserProfileCountAggregateInputType = {
    id?: true
    userId?: true
    knorrLevel?: true
    knorrXP?: true
    rewardPoints?: true
    badges?: true
    followers?: true
    following?: true
    likedPosts?: true
    savedPosts?: true
    totalPosts?: true
    totalViews?: true
    totalLikes?: true
    totalComments?: true
    totalShares?: true
    createdAt?: true
    _all?: true
  }

  export type KnorrUserProfileAggregateArgs = {
    /**
     * Filter which KnorrUserProfile to aggregate.
     * 
    **/
    where?: KnorrUserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnorrUserProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<KnorrUserProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: KnorrUserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnorrUserProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnorrUserProfiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KnorrUserProfiles
    **/
    _count?: true | KnorrUserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KnorrUserProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KnorrUserProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KnorrUserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KnorrUserProfileMaxAggregateInputType
  }

  export type GetKnorrUserProfileAggregateType<T extends KnorrUserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateKnorrUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKnorrUserProfile[P]>
      : GetScalarType<T[P], AggregateKnorrUserProfile[P]>
  }




  export type KnorrUserProfileGroupByArgs = {
    where?: KnorrUserProfileWhereInput
    orderBy?: Enumerable<KnorrUserProfileOrderByWithAggregationInput>
    by: Array<KnorrUserProfileScalarFieldEnum>
    having?: KnorrUserProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KnorrUserProfileCountAggregateInputType | true
    _avg?: KnorrUserProfileAvgAggregateInputType
    _sum?: KnorrUserProfileSumAggregateInputType
    _min?: KnorrUserProfileMinAggregateInputType
    _max?: KnorrUserProfileMaxAggregateInputType
  }


  export type KnorrUserProfileGroupByOutputType = {
    id: string
    userId: string
    knorrLevel: number
    knorrXP: number
    rewardPoints: number
    badges: string | null
    followers: string | null
    following: string | null
    likedPosts: string | null
    savedPosts: string | null
    totalPosts: number
    totalViews: number
    totalLikes: number
    totalComments: number
    totalShares: number
    createdAt: Date
    _count: KnorrUserProfileCountAggregateOutputType | null
    _avg: KnorrUserProfileAvgAggregateOutputType | null
    _sum: KnorrUserProfileSumAggregateOutputType | null
    _min: KnorrUserProfileMinAggregateOutputType | null
    _max: KnorrUserProfileMaxAggregateOutputType | null
  }

  type GetKnorrUserProfileGroupByPayload<T extends KnorrUserProfileGroupByArgs> = PrismaPromise<
    Array<
      PickArray<KnorrUserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KnorrUserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KnorrUserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], KnorrUserProfileGroupByOutputType[P]>
        }
      >
    >


  export type KnorrUserProfileSelect = {
    id?: boolean
    userId?: boolean
    knorrLevel?: boolean
    knorrXP?: boolean
    rewardPoints?: boolean
    badges?: boolean
    followers?: boolean
    following?: boolean
    likedPosts?: boolean
    savedPosts?: boolean
    totalPosts?: boolean
    totalViews?: boolean
    totalLikes?: boolean
    totalComments?: boolean
    totalShares?: boolean
    createdAt?: boolean
    user?: boolean | UserArgs
  }

  export type KnorrUserProfileInclude = {
    user?: boolean | UserArgs
  }

  export type KnorrUserProfileGetPayload<
    S extends boolean | null | undefined | KnorrUserProfileArgs,
    U = keyof S
      > = S extends true
        ? KnorrUserProfile
    : S extends undefined
    ? never
    : S extends KnorrUserProfileArgs | KnorrUserProfileFindManyArgs
    ?'include' extends U
    ? KnorrUserProfile  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof KnorrUserProfile ? KnorrUserProfile[P] : never
  } 
    : KnorrUserProfile
  : KnorrUserProfile


  type KnorrUserProfileCountArgs = Merge<
    Omit<KnorrUserProfileFindManyArgs, 'select' | 'include'> & {
      select?: KnorrUserProfileCountAggregateInputType | true
    }
  >

  export interface KnorrUserProfileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one KnorrUserProfile that matches the filter.
     * @param {KnorrUserProfileFindUniqueArgs} args - Arguments to find a KnorrUserProfile
     * @example
     * // Get one KnorrUserProfile
     * const knorrUserProfile = await prisma.knorrUserProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KnorrUserProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, KnorrUserProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'KnorrUserProfile'> extends True ? CheckSelect<T, Prisma__KnorrUserProfileClient<KnorrUserProfile>, Prisma__KnorrUserProfileClient<KnorrUserProfileGetPayload<T>>> : CheckSelect<T, Prisma__KnorrUserProfileClient<KnorrUserProfile | null >, Prisma__KnorrUserProfileClient<KnorrUserProfileGetPayload<T> | null >>

    /**
     * Find the first KnorrUserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrUserProfileFindFirstArgs} args - Arguments to find a KnorrUserProfile
     * @example
     * // Get one KnorrUserProfile
     * const knorrUserProfile = await prisma.knorrUserProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KnorrUserProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, KnorrUserProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'KnorrUserProfile'> extends True ? CheckSelect<T, Prisma__KnorrUserProfileClient<KnorrUserProfile>, Prisma__KnorrUserProfileClient<KnorrUserProfileGetPayload<T>>> : CheckSelect<T, Prisma__KnorrUserProfileClient<KnorrUserProfile | null >, Prisma__KnorrUserProfileClient<KnorrUserProfileGetPayload<T> | null >>

    /**
     * Find zero or more KnorrUserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrUserProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KnorrUserProfiles
     * const knorrUserProfiles = await prisma.knorrUserProfile.findMany()
     * 
     * // Get first 10 KnorrUserProfiles
     * const knorrUserProfiles = await prisma.knorrUserProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const knorrUserProfileWithIdOnly = await prisma.knorrUserProfile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KnorrUserProfileFindManyArgs>(
      args?: SelectSubset<T, KnorrUserProfileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<KnorrUserProfile>>, PrismaPromise<Array<KnorrUserProfileGetPayload<T>>>>

    /**
     * Create a KnorrUserProfile.
     * @param {KnorrUserProfileCreateArgs} args - Arguments to create a KnorrUserProfile.
     * @example
     * // Create one KnorrUserProfile
     * const KnorrUserProfile = await prisma.knorrUserProfile.create({
     *   data: {
     *     // ... data to create a KnorrUserProfile
     *   }
     * })
     * 
    **/
    create<T extends KnorrUserProfileCreateArgs>(
      args: SelectSubset<T, KnorrUserProfileCreateArgs>
    ): CheckSelect<T, Prisma__KnorrUserProfileClient<KnorrUserProfile>, Prisma__KnorrUserProfileClient<KnorrUserProfileGetPayload<T>>>

    /**
     * Create many KnorrUserProfiles.
     *     @param {KnorrUserProfileCreateManyArgs} args - Arguments to create many KnorrUserProfiles.
     *     @example
     *     // Create many KnorrUserProfiles
     *     const knorrUserProfile = await prisma.knorrUserProfile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KnorrUserProfileCreateManyArgs>(
      args?: SelectSubset<T, KnorrUserProfileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a KnorrUserProfile.
     * @param {KnorrUserProfileDeleteArgs} args - Arguments to delete one KnorrUserProfile.
     * @example
     * // Delete one KnorrUserProfile
     * const KnorrUserProfile = await prisma.knorrUserProfile.delete({
     *   where: {
     *     // ... filter to delete one KnorrUserProfile
     *   }
     * })
     * 
    **/
    delete<T extends KnorrUserProfileDeleteArgs>(
      args: SelectSubset<T, KnorrUserProfileDeleteArgs>
    ): CheckSelect<T, Prisma__KnorrUserProfileClient<KnorrUserProfile>, Prisma__KnorrUserProfileClient<KnorrUserProfileGetPayload<T>>>

    /**
     * Update one KnorrUserProfile.
     * @param {KnorrUserProfileUpdateArgs} args - Arguments to update one KnorrUserProfile.
     * @example
     * // Update one KnorrUserProfile
     * const knorrUserProfile = await prisma.knorrUserProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KnorrUserProfileUpdateArgs>(
      args: SelectSubset<T, KnorrUserProfileUpdateArgs>
    ): CheckSelect<T, Prisma__KnorrUserProfileClient<KnorrUserProfile>, Prisma__KnorrUserProfileClient<KnorrUserProfileGetPayload<T>>>

    /**
     * Delete zero or more KnorrUserProfiles.
     * @param {KnorrUserProfileDeleteManyArgs} args - Arguments to filter KnorrUserProfiles to delete.
     * @example
     * // Delete a few KnorrUserProfiles
     * const { count } = await prisma.knorrUserProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KnorrUserProfileDeleteManyArgs>(
      args?: SelectSubset<T, KnorrUserProfileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more KnorrUserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrUserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KnorrUserProfiles
     * const knorrUserProfile = await prisma.knorrUserProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KnorrUserProfileUpdateManyArgs>(
      args: SelectSubset<T, KnorrUserProfileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one KnorrUserProfile.
     * @param {KnorrUserProfileUpsertArgs} args - Arguments to update or create a KnorrUserProfile.
     * @example
     * // Update or create a KnorrUserProfile
     * const knorrUserProfile = await prisma.knorrUserProfile.upsert({
     *   create: {
     *     // ... data to create a KnorrUserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KnorrUserProfile we want to update
     *   }
     * })
    **/
    upsert<T extends KnorrUserProfileUpsertArgs>(
      args: SelectSubset<T, KnorrUserProfileUpsertArgs>
    ): CheckSelect<T, Prisma__KnorrUserProfileClient<KnorrUserProfile>, Prisma__KnorrUserProfileClient<KnorrUserProfileGetPayload<T>>>

    /**
     * Count the number of KnorrUserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrUserProfileCountArgs} args - Arguments to filter KnorrUserProfiles to count.
     * @example
     * // Count the number of KnorrUserProfiles
     * const count = await prisma.knorrUserProfile.count({
     *   where: {
     *     // ... the filter for the KnorrUserProfiles we want to count
     *   }
     * })
    **/
    count<T extends KnorrUserProfileCountArgs>(
      args?: Subset<T, KnorrUserProfileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KnorrUserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KnorrUserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrUserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KnorrUserProfileAggregateArgs>(args: Subset<T, KnorrUserProfileAggregateArgs>): PrismaPromise<GetKnorrUserProfileAggregateType<T>>

    /**
     * Group by KnorrUserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrUserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KnorrUserProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KnorrUserProfileGroupByArgs['orderBy'] }
        : { orderBy?: KnorrUserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KnorrUserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKnorrUserProfileGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for KnorrUserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__KnorrUserProfileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * KnorrUserProfile findUnique
   */
  export type KnorrUserProfileFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the KnorrUserProfile
     * 
    **/
    select?: KnorrUserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrUserProfileInclude | null
    /**
     * Throw an Error if a KnorrUserProfile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which KnorrUserProfile to fetch.
     * 
    **/
    where: KnorrUserProfileWhereUniqueInput
  }


  /**
   * KnorrUserProfile findFirst
   */
  export type KnorrUserProfileFindFirstArgs = {
    /**
     * Select specific fields to fetch from the KnorrUserProfile
     * 
    **/
    select?: KnorrUserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrUserProfileInclude | null
    /**
     * Throw an Error if a KnorrUserProfile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which KnorrUserProfile to fetch.
     * 
    **/
    where?: KnorrUserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnorrUserProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<KnorrUserProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KnorrUserProfiles.
     * 
    **/
    cursor?: KnorrUserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnorrUserProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnorrUserProfiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KnorrUserProfiles.
     * 
    **/
    distinct?: Enumerable<KnorrUserProfileScalarFieldEnum>
  }


  /**
   * KnorrUserProfile findMany
   */
  export type KnorrUserProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the KnorrUserProfile
     * 
    **/
    select?: KnorrUserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrUserProfileInclude | null
    /**
     * Filter, which KnorrUserProfiles to fetch.
     * 
    **/
    where?: KnorrUserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnorrUserProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<KnorrUserProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KnorrUserProfiles.
     * 
    **/
    cursor?: KnorrUserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnorrUserProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnorrUserProfiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<KnorrUserProfileScalarFieldEnum>
  }


  /**
   * KnorrUserProfile create
   */
  export type KnorrUserProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the KnorrUserProfile
     * 
    **/
    select?: KnorrUserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrUserProfileInclude | null
    /**
     * The data needed to create a KnorrUserProfile.
     * 
    **/
    data: XOR<KnorrUserProfileCreateInput, KnorrUserProfileUncheckedCreateInput>
  }


  /**
   * KnorrUserProfile createMany
   */
  export type KnorrUserProfileCreateManyArgs = {
    /**
     * The data used to create many KnorrUserProfiles.
     * 
    **/
    data: Enumerable<KnorrUserProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * KnorrUserProfile update
   */
  export type KnorrUserProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the KnorrUserProfile
     * 
    **/
    select?: KnorrUserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrUserProfileInclude | null
    /**
     * The data needed to update a KnorrUserProfile.
     * 
    **/
    data: XOR<KnorrUserProfileUpdateInput, KnorrUserProfileUncheckedUpdateInput>
    /**
     * Choose, which KnorrUserProfile to update.
     * 
    **/
    where: KnorrUserProfileWhereUniqueInput
  }


  /**
   * KnorrUserProfile updateMany
   */
  export type KnorrUserProfileUpdateManyArgs = {
    /**
     * The data used to update KnorrUserProfiles.
     * 
    **/
    data: XOR<KnorrUserProfileUpdateManyMutationInput, KnorrUserProfileUncheckedUpdateManyInput>
    /**
     * Filter which KnorrUserProfiles to update
     * 
    **/
    where?: KnorrUserProfileWhereInput
  }


  /**
   * KnorrUserProfile upsert
   */
  export type KnorrUserProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the KnorrUserProfile
     * 
    **/
    select?: KnorrUserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrUserProfileInclude | null
    /**
     * The filter to search for the KnorrUserProfile to update in case it exists.
     * 
    **/
    where: KnorrUserProfileWhereUniqueInput
    /**
     * In case the KnorrUserProfile found by the `where` argument doesn't exist, create a new KnorrUserProfile with this data.
     * 
    **/
    create: XOR<KnorrUserProfileCreateInput, KnorrUserProfileUncheckedCreateInput>
    /**
     * In case the KnorrUserProfile was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<KnorrUserProfileUpdateInput, KnorrUserProfileUncheckedUpdateInput>
  }


  /**
   * KnorrUserProfile delete
   */
  export type KnorrUserProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the KnorrUserProfile
     * 
    **/
    select?: KnorrUserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrUserProfileInclude | null
    /**
     * Filter which KnorrUserProfile to delete.
     * 
    **/
    where: KnorrUserProfileWhereUniqueInput
  }


  /**
   * KnorrUserProfile deleteMany
   */
  export type KnorrUserProfileDeleteManyArgs = {
    /**
     * Filter which KnorrUserProfiles to delete
     * 
    **/
    where?: KnorrUserProfileWhereInput
  }


  /**
   * KnorrUserProfile without action
   */
  export type KnorrUserProfileArgs = {
    /**
     * Select specific fields to fetch from the KnorrUserProfile
     * 
    **/
    select?: KnorrUserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrUserProfileInclude | null
  }



  /**
   * Model Comment
   */


  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    postId: string | null
    userId: string | null
    content: string | null
    createdAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    postId: string | null
    userId: string | null
    content: string | null
    createdAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    postId: number
    userId: number
    content: number
    createdAt: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    content?: true
    createdAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    content?: true
    createdAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type CommentAggregateArgs = {
    /**
     * Filter which Comment to aggregate.
     * 
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs = {
    where?: CommentWhereInput
    orderBy?: Enumerable<CommentOrderByWithAggregationInput>
    by: Array<CommentScalarFieldEnum>
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }


  export type CommentGroupByOutputType = {
    id: string
    postId: string
    userId: string
    content: string
    createdAt: Date
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect = {
    id?: boolean
    postId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    post?: boolean | KnorrPostArgs
    user?: boolean | UserArgs
  }

  export type CommentInclude = {
    post?: boolean | KnorrPostArgs
    user?: boolean | UserArgs
  }

  export type CommentGetPayload<
    S extends boolean | null | undefined | CommentArgs,
    U = keyof S
      > = S extends true
        ? Comment
    : S extends undefined
    ? never
    : S extends CommentArgs | CommentFindManyArgs
    ?'include' extends U
    ? Comment  & {
    [P in TrueKeys<S['include']>]:
        P extends 'post' ? KnorrPostGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'post' ? KnorrPostGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Comment ? Comment[P] : never
  } 
    : Comment
  : Comment


  type CommentCountArgs = Merge<
    Omit<CommentFindManyArgs, 'select' | 'include'> & {
      select?: CommentCountAggregateInputType | true
    }
  >

  export interface CommentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comment'> extends True ? CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>> : CheckSelect<T, Prisma__CommentClient<Comment | null >, Prisma__CommentClient<CommentGetPayload<T> | null >>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comment'> extends True ? CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>> : CheckSelect<T, Prisma__CommentClient<Comment | null >, Prisma__CommentClient<CommentGetPayload<T> | null >>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs>(
      args?: SelectSubset<T, CommentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Comment>>, PrismaPromise<Array<CommentGetPayload<T>>>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs>(
      args: SelectSubset<T, CommentCreateArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Create many Comments.
     *     @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentCreateManyArgs>(
      args?: SelectSubset<T, CommentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs>(
      args: SelectSubset<T, CommentDeleteArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs>(
      args: SelectSubset<T, CommentUpdateArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs>(
      args?: SelectSubset<T, CommentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs>(
      args: SelectSubset<T, CommentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs>(
      args: SelectSubset<T, CommentUpsertArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    post<T extends KnorrPostArgs = {}>(args?: Subset<T, KnorrPostArgs>): CheckSelect<T, Prisma__KnorrPostClient<KnorrPost | null >, Prisma__KnorrPostClient<KnorrPostGetPayload<T> | null >>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Throw an Error if a Comment can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Comment to fetch.
     * 
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Throw an Error if a Comment can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Comment to fetch.
     * 
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     * 
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     * 
    **/
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment findMany
   */
  export type CommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     * 
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * The data needed to create a Comment.
     * 
    **/
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }


  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs = {
    /**
     * The data used to create many Comments.
     * 
    **/
    data: Enumerable<CommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * The data needed to update a Comment.
     * 
    **/
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     * 
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs = {
    /**
     * The data used to update Comments.
     * 
    **/
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     * 
    **/
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * The filter to search for the Comment to update in case it exists.
     * 
    **/
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     * 
    **/
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Filter which Comment to delete.
     * 
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs = {
    /**
     * Filter which Comments to delete
     * 
    **/
    where?: CommentWhereInput
  }


  /**
   * Comment without action
   */
  export type CommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
  }



  /**
   * Model ShoppingList
   */


  export type AggregateShoppingList = {
    _count: ShoppingListCountAggregateOutputType | null
    _min: ShoppingListMinAggregateOutputType | null
    _max: ShoppingListMaxAggregateOutputType | null
  }

  export type ShoppingListMinAggregateOutputType = {
    id: string | null
    userId: string | null
    items: string | null
  }

  export type ShoppingListMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    items: string | null
  }

  export type ShoppingListCountAggregateOutputType = {
    id: number
    userId: number
    items: number
    _all: number
  }


  export type ShoppingListMinAggregateInputType = {
    id?: true
    userId?: true
    items?: true
  }

  export type ShoppingListMaxAggregateInputType = {
    id?: true
    userId?: true
    items?: true
  }

  export type ShoppingListCountAggregateInputType = {
    id?: true
    userId?: true
    items?: true
    _all?: true
  }

  export type ShoppingListAggregateArgs = {
    /**
     * Filter which ShoppingList to aggregate.
     * 
    **/
    where?: ShoppingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingLists to fetch.
     * 
    **/
    orderBy?: Enumerable<ShoppingListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ShoppingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingLists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingLists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShoppingLists
    **/
    _count?: true | ShoppingListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShoppingListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShoppingListMaxAggregateInputType
  }

  export type GetShoppingListAggregateType<T extends ShoppingListAggregateArgs> = {
        [P in keyof T & keyof AggregateShoppingList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShoppingList[P]>
      : GetScalarType<T[P], AggregateShoppingList[P]>
  }




  export type ShoppingListGroupByArgs = {
    where?: ShoppingListWhereInput
    orderBy?: Enumerable<ShoppingListOrderByWithAggregationInput>
    by: Array<ShoppingListScalarFieldEnum>
    having?: ShoppingListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShoppingListCountAggregateInputType | true
    _min?: ShoppingListMinAggregateInputType
    _max?: ShoppingListMaxAggregateInputType
  }


  export type ShoppingListGroupByOutputType = {
    id: string
    userId: string
    items: string
    _count: ShoppingListCountAggregateOutputType | null
    _min: ShoppingListMinAggregateOutputType | null
    _max: ShoppingListMaxAggregateOutputType | null
  }

  type GetShoppingListGroupByPayload<T extends ShoppingListGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ShoppingListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShoppingListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShoppingListGroupByOutputType[P]>
            : GetScalarType<T[P], ShoppingListGroupByOutputType[P]>
        }
      >
    >


  export type ShoppingListSelect = {
    id?: boolean
    userId?: boolean
    items?: boolean
    user?: boolean | UserArgs
  }

  export type ShoppingListInclude = {
    user?: boolean | UserArgs
  }

  export type ShoppingListGetPayload<
    S extends boolean | null | undefined | ShoppingListArgs,
    U = keyof S
      > = S extends true
        ? ShoppingList
    : S extends undefined
    ? never
    : S extends ShoppingListArgs | ShoppingListFindManyArgs
    ?'include' extends U
    ? ShoppingList  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof ShoppingList ? ShoppingList[P] : never
  } 
    : ShoppingList
  : ShoppingList


  type ShoppingListCountArgs = Merge<
    Omit<ShoppingListFindManyArgs, 'select' | 'include'> & {
      select?: ShoppingListCountAggregateInputType | true
    }
  >

  export interface ShoppingListDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ShoppingList that matches the filter.
     * @param {ShoppingListFindUniqueArgs} args - Arguments to find a ShoppingList
     * @example
     * // Get one ShoppingList
     * const shoppingList = await prisma.shoppingList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShoppingListFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShoppingListFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ShoppingList'> extends True ? CheckSelect<T, Prisma__ShoppingListClient<ShoppingList>, Prisma__ShoppingListClient<ShoppingListGetPayload<T>>> : CheckSelect<T, Prisma__ShoppingListClient<ShoppingList | null >, Prisma__ShoppingListClient<ShoppingListGetPayload<T> | null >>

    /**
     * Find the first ShoppingList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListFindFirstArgs} args - Arguments to find a ShoppingList
     * @example
     * // Get one ShoppingList
     * const shoppingList = await prisma.shoppingList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShoppingListFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShoppingListFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ShoppingList'> extends True ? CheckSelect<T, Prisma__ShoppingListClient<ShoppingList>, Prisma__ShoppingListClient<ShoppingListGetPayload<T>>> : CheckSelect<T, Prisma__ShoppingListClient<ShoppingList | null >, Prisma__ShoppingListClient<ShoppingListGetPayload<T> | null >>

    /**
     * Find zero or more ShoppingLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShoppingLists
     * const shoppingLists = await prisma.shoppingList.findMany()
     * 
     * // Get first 10 ShoppingLists
     * const shoppingLists = await prisma.shoppingList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shoppingListWithIdOnly = await prisma.shoppingList.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShoppingListFindManyArgs>(
      args?: SelectSubset<T, ShoppingListFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ShoppingList>>, PrismaPromise<Array<ShoppingListGetPayload<T>>>>

    /**
     * Create a ShoppingList.
     * @param {ShoppingListCreateArgs} args - Arguments to create a ShoppingList.
     * @example
     * // Create one ShoppingList
     * const ShoppingList = await prisma.shoppingList.create({
     *   data: {
     *     // ... data to create a ShoppingList
     *   }
     * })
     * 
    **/
    create<T extends ShoppingListCreateArgs>(
      args: SelectSubset<T, ShoppingListCreateArgs>
    ): CheckSelect<T, Prisma__ShoppingListClient<ShoppingList>, Prisma__ShoppingListClient<ShoppingListGetPayload<T>>>

    /**
     * Create many ShoppingLists.
     *     @param {ShoppingListCreateManyArgs} args - Arguments to create many ShoppingLists.
     *     @example
     *     // Create many ShoppingLists
     *     const shoppingList = await prisma.shoppingList.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShoppingListCreateManyArgs>(
      args?: SelectSubset<T, ShoppingListCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ShoppingList.
     * @param {ShoppingListDeleteArgs} args - Arguments to delete one ShoppingList.
     * @example
     * // Delete one ShoppingList
     * const ShoppingList = await prisma.shoppingList.delete({
     *   where: {
     *     // ... filter to delete one ShoppingList
     *   }
     * })
     * 
    **/
    delete<T extends ShoppingListDeleteArgs>(
      args: SelectSubset<T, ShoppingListDeleteArgs>
    ): CheckSelect<T, Prisma__ShoppingListClient<ShoppingList>, Prisma__ShoppingListClient<ShoppingListGetPayload<T>>>

    /**
     * Update one ShoppingList.
     * @param {ShoppingListUpdateArgs} args - Arguments to update one ShoppingList.
     * @example
     * // Update one ShoppingList
     * const shoppingList = await prisma.shoppingList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShoppingListUpdateArgs>(
      args: SelectSubset<T, ShoppingListUpdateArgs>
    ): CheckSelect<T, Prisma__ShoppingListClient<ShoppingList>, Prisma__ShoppingListClient<ShoppingListGetPayload<T>>>

    /**
     * Delete zero or more ShoppingLists.
     * @param {ShoppingListDeleteManyArgs} args - Arguments to filter ShoppingLists to delete.
     * @example
     * // Delete a few ShoppingLists
     * const { count } = await prisma.shoppingList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShoppingListDeleteManyArgs>(
      args?: SelectSubset<T, ShoppingListDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShoppingLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShoppingLists
     * const shoppingList = await prisma.shoppingList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShoppingListUpdateManyArgs>(
      args: SelectSubset<T, ShoppingListUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ShoppingList.
     * @param {ShoppingListUpsertArgs} args - Arguments to update or create a ShoppingList.
     * @example
     * // Update or create a ShoppingList
     * const shoppingList = await prisma.shoppingList.upsert({
     *   create: {
     *     // ... data to create a ShoppingList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShoppingList we want to update
     *   }
     * })
    **/
    upsert<T extends ShoppingListUpsertArgs>(
      args: SelectSubset<T, ShoppingListUpsertArgs>
    ): CheckSelect<T, Prisma__ShoppingListClient<ShoppingList>, Prisma__ShoppingListClient<ShoppingListGetPayload<T>>>

    /**
     * Count the number of ShoppingLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListCountArgs} args - Arguments to filter ShoppingLists to count.
     * @example
     * // Count the number of ShoppingLists
     * const count = await prisma.shoppingList.count({
     *   where: {
     *     // ... the filter for the ShoppingLists we want to count
     *   }
     * })
    **/
    count<T extends ShoppingListCountArgs>(
      args?: Subset<T, ShoppingListCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShoppingListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShoppingList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShoppingListAggregateArgs>(args: Subset<T, ShoppingListAggregateArgs>): PrismaPromise<GetShoppingListAggregateType<T>>

    /**
     * Group by ShoppingList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShoppingListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShoppingListGroupByArgs['orderBy'] }
        : { orderBy?: ShoppingListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShoppingListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShoppingListGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShoppingList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShoppingListClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ShoppingList findUnique
   */
  export type ShoppingListFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ShoppingList
     * 
    **/
    select?: ShoppingListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShoppingListInclude | null
    /**
     * Throw an Error if a ShoppingList can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ShoppingList to fetch.
     * 
    **/
    where: ShoppingListWhereUniqueInput
  }


  /**
   * ShoppingList findFirst
   */
  export type ShoppingListFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ShoppingList
     * 
    **/
    select?: ShoppingListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShoppingListInclude | null
    /**
     * Throw an Error if a ShoppingList can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ShoppingList to fetch.
     * 
    **/
    where?: ShoppingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingLists to fetch.
     * 
    **/
    orderBy?: Enumerable<ShoppingListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShoppingLists.
     * 
    **/
    cursor?: ShoppingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingLists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingLists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShoppingLists.
     * 
    **/
    distinct?: Enumerable<ShoppingListScalarFieldEnum>
  }


  /**
   * ShoppingList findMany
   */
  export type ShoppingListFindManyArgs = {
    /**
     * Select specific fields to fetch from the ShoppingList
     * 
    **/
    select?: ShoppingListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShoppingListInclude | null
    /**
     * Filter, which ShoppingLists to fetch.
     * 
    **/
    where?: ShoppingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingLists to fetch.
     * 
    **/
    orderBy?: Enumerable<ShoppingListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShoppingLists.
     * 
    **/
    cursor?: ShoppingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingLists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingLists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShoppingListScalarFieldEnum>
  }


  /**
   * ShoppingList create
   */
  export type ShoppingListCreateArgs = {
    /**
     * Select specific fields to fetch from the ShoppingList
     * 
    **/
    select?: ShoppingListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShoppingListInclude | null
    /**
     * The data needed to create a ShoppingList.
     * 
    **/
    data: XOR<ShoppingListCreateInput, ShoppingListUncheckedCreateInput>
  }


  /**
   * ShoppingList createMany
   */
  export type ShoppingListCreateManyArgs = {
    /**
     * The data used to create many ShoppingLists.
     * 
    **/
    data: Enumerable<ShoppingListCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ShoppingList update
   */
  export type ShoppingListUpdateArgs = {
    /**
     * Select specific fields to fetch from the ShoppingList
     * 
    **/
    select?: ShoppingListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShoppingListInclude | null
    /**
     * The data needed to update a ShoppingList.
     * 
    **/
    data: XOR<ShoppingListUpdateInput, ShoppingListUncheckedUpdateInput>
    /**
     * Choose, which ShoppingList to update.
     * 
    **/
    where: ShoppingListWhereUniqueInput
  }


  /**
   * ShoppingList updateMany
   */
  export type ShoppingListUpdateManyArgs = {
    /**
     * The data used to update ShoppingLists.
     * 
    **/
    data: XOR<ShoppingListUpdateManyMutationInput, ShoppingListUncheckedUpdateManyInput>
    /**
     * Filter which ShoppingLists to update
     * 
    **/
    where?: ShoppingListWhereInput
  }


  /**
   * ShoppingList upsert
   */
  export type ShoppingListUpsertArgs = {
    /**
     * Select specific fields to fetch from the ShoppingList
     * 
    **/
    select?: ShoppingListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShoppingListInclude | null
    /**
     * The filter to search for the ShoppingList to update in case it exists.
     * 
    **/
    where: ShoppingListWhereUniqueInput
    /**
     * In case the ShoppingList found by the `where` argument doesn't exist, create a new ShoppingList with this data.
     * 
    **/
    create: XOR<ShoppingListCreateInput, ShoppingListUncheckedCreateInput>
    /**
     * In case the ShoppingList was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ShoppingListUpdateInput, ShoppingListUncheckedUpdateInput>
  }


  /**
   * ShoppingList delete
   */
  export type ShoppingListDeleteArgs = {
    /**
     * Select specific fields to fetch from the ShoppingList
     * 
    **/
    select?: ShoppingListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShoppingListInclude | null
    /**
     * Filter which ShoppingList to delete.
     * 
    **/
    where: ShoppingListWhereUniqueInput
  }


  /**
   * ShoppingList deleteMany
   */
  export type ShoppingListDeleteManyArgs = {
    /**
     * Filter which ShoppingLists to delete
     * 
    **/
    where?: ShoppingListWhereInput
  }


  /**
   * ShoppingList without action
   */
  export type ShoppingListArgs = {
    /**
     * Select specific fields to fetch from the ShoppingList
     * 
    **/
    select?: ShoppingListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShoppingListInclude | null
  }



  /**
   * Model FridgeItem
   */


  export type AggregateFridgeItem = {
    _count: FridgeItemCountAggregateOutputType | null
    _avg: FridgeItemAvgAggregateOutputType | null
    _sum: FridgeItemSumAggregateOutputType | null
    _min: FridgeItemMinAggregateOutputType | null
    _max: FridgeItemMaxAggregateOutputType | null
  }

  export type FridgeItemAvgAggregateOutputType = {
    quantity: number | null
  }

  export type FridgeItemSumAggregateOutputType = {
    quantity: number | null
  }

  export type FridgeItemMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    quantity: number | null
    expiryDate: Date | null
    zone: string | null
    category: string | null
    addedAt: Date | null
  }

  export type FridgeItemMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    quantity: number | null
    expiryDate: Date | null
    zone: string | null
    category: string | null
    addedAt: Date | null
  }

  export type FridgeItemCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    quantity: number
    expiryDate: number
    zone: number
    category: number
    addedAt: number
    _all: number
  }


  export type FridgeItemAvgAggregateInputType = {
    quantity?: true
  }

  export type FridgeItemSumAggregateInputType = {
    quantity?: true
  }

  export type FridgeItemMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    quantity?: true
    expiryDate?: true
    zone?: true
    category?: true
    addedAt?: true
  }

  export type FridgeItemMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    quantity?: true
    expiryDate?: true
    zone?: true
    category?: true
    addedAt?: true
  }

  export type FridgeItemCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    quantity?: true
    expiryDate?: true
    zone?: true
    category?: true
    addedAt?: true
    _all?: true
  }

  export type FridgeItemAggregateArgs = {
    /**
     * Filter which FridgeItem to aggregate.
     * 
    **/
    where?: FridgeItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FridgeItems to fetch.
     * 
    **/
    orderBy?: Enumerable<FridgeItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FridgeItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FridgeItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FridgeItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FridgeItems
    **/
    _count?: true | FridgeItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FridgeItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FridgeItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FridgeItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FridgeItemMaxAggregateInputType
  }

  export type GetFridgeItemAggregateType<T extends FridgeItemAggregateArgs> = {
        [P in keyof T & keyof AggregateFridgeItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFridgeItem[P]>
      : GetScalarType<T[P], AggregateFridgeItem[P]>
  }




  export type FridgeItemGroupByArgs = {
    where?: FridgeItemWhereInput
    orderBy?: Enumerable<FridgeItemOrderByWithAggregationInput>
    by: Array<FridgeItemScalarFieldEnum>
    having?: FridgeItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FridgeItemCountAggregateInputType | true
    _avg?: FridgeItemAvgAggregateInputType
    _sum?: FridgeItemSumAggregateInputType
    _min?: FridgeItemMinAggregateInputType
    _max?: FridgeItemMaxAggregateInputType
  }


  export type FridgeItemGroupByOutputType = {
    id: string
    userId: string
    name: string
    quantity: number
    expiryDate: Date | null
    zone: string | null
    category: string | null
    addedAt: Date
    _count: FridgeItemCountAggregateOutputType | null
    _avg: FridgeItemAvgAggregateOutputType | null
    _sum: FridgeItemSumAggregateOutputType | null
    _min: FridgeItemMinAggregateOutputType | null
    _max: FridgeItemMaxAggregateOutputType | null
  }

  type GetFridgeItemGroupByPayload<T extends FridgeItemGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FridgeItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FridgeItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FridgeItemGroupByOutputType[P]>
            : GetScalarType<T[P], FridgeItemGroupByOutputType[P]>
        }
      >
    >


  export type FridgeItemSelect = {
    id?: boolean
    userId?: boolean
    name?: boolean
    quantity?: boolean
    expiryDate?: boolean
    zone?: boolean
    category?: boolean
    addedAt?: boolean
    user?: boolean | UserArgs
  }

  export type FridgeItemInclude = {
    user?: boolean | UserArgs
  }

  export type FridgeItemGetPayload<
    S extends boolean | null | undefined | FridgeItemArgs,
    U = keyof S
      > = S extends true
        ? FridgeItem
    : S extends undefined
    ? never
    : S extends FridgeItemArgs | FridgeItemFindManyArgs
    ?'include' extends U
    ? FridgeItem  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof FridgeItem ? FridgeItem[P] : never
  } 
    : FridgeItem
  : FridgeItem


  type FridgeItemCountArgs = Merge<
    Omit<FridgeItemFindManyArgs, 'select' | 'include'> & {
      select?: FridgeItemCountAggregateInputType | true
    }
  >

  export interface FridgeItemDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one FridgeItem that matches the filter.
     * @param {FridgeItemFindUniqueArgs} args - Arguments to find a FridgeItem
     * @example
     * // Get one FridgeItem
     * const fridgeItem = await prisma.fridgeItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FridgeItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FridgeItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FridgeItem'> extends True ? CheckSelect<T, Prisma__FridgeItemClient<FridgeItem>, Prisma__FridgeItemClient<FridgeItemGetPayload<T>>> : CheckSelect<T, Prisma__FridgeItemClient<FridgeItem | null >, Prisma__FridgeItemClient<FridgeItemGetPayload<T> | null >>

    /**
     * Find the first FridgeItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FridgeItemFindFirstArgs} args - Arguments to find a FridgeItem
     * @example
     * // Get one FridgeItem
     * const fridgeItem = await prisma.fridgeItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FridgeItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FridgeItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FridgeItem'> extends True ? CheckSelect<T, Prisma__FridgeItemClient<FridgeItem>, Prisma__FridgeItemClient<FridgeItemGetPayload<T>>> : CheckSelect<T, Prisma__FridgeItemClient<FridgeItem | null >, Prisma__FridgeItemClient<FridgeItemGetPayload<T> | null >>

    /**
     * Find zero or more FridgeItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FridgeItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FridgeItems
     * const fridgeItems = await prisma.fridgeItem.findMany()
     * 
     * // Get first 10 FridgeItems
     * const fridgeItems = await prisma.fridgeItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fridgeItemWithIdOnly = await prisma.fridgeItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FridgeItemFindManyArgs>(
      args?: SelectSubset<T, FridgeItemFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<FridgeItem>>, PrismaPromise<Array<FridgeItemGetPayload<T>>>>

    /**
     * Create a FridgeItem.
     * @param {FridgeItemCreateArgs} args - Arguments to create a FridgeItem.
     * @example
     * // Create one FridgeItem
     * const FridgeItem = await prisma.fridgeItem.create({
     *   data: {
     *     // ... data to create a FridgeItem
     *   }
     * })
     * 
    **/
    create<T extends FridgeItemCreateArgs>(
      args: SelectSubset<T, FridgeItemCreateArgs>
    ): CheckSelect<T, Prisma__FridgeItemClient<FridgeItem>, Prisma__FridgeItemClient<FridgeItemGetPayload<T>>>

    /**
     * Create many FridgeItems.
     *     @param {FridgeItemCreateManyArgs} args - Arguments to create many FridgeItems.
     *     @example
     *     // Create many FridgeItems
     *     const fridgeItem = await prisma.fridgeItem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FridgeItemCreateManyArgs>(
      args?: SelectSubset<T, FridgeItemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a FridgeItem.
     * @param {FridgeItemDeleteArgs} args - Arguments to delete one FridgeItem.
     * @example
     * // Delete one FridgeItem
     * const FridgeItem = await prisma.fridgeItem.delete({
     *   where: {
     *     // ... filter to delete one FridgeItem
     *   }
     * })
     * 
    **/
    delete<T extends FridgeItemDeleteArgs>(
      args: SelectSubset<T, FridgeItemDeleteArgs>
    ): CheckSelect<T, Prisma__FridgeItemClient<FridgeItem>, Prisma__FridgeItemClient<FridgeItemGetPayload<T>>>

    /**
     * Update one FridgeItem.
     * @param {FridgeItemUpdateArgs} args - Arguments to update one FridgeItem.
     * @example
     * // Update one FridgeItem
     * const fridgeItem = await prisma.fridgeItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FridgeItemUpdateArgs>(
      args: SelectSubset<T, FridgeItemUpdateArgs>
    ): CheckSelect<T, Prisma__FridgeItemClient<FridgeItem>, Prisma__FridgeItemClient<FridgeItemGetPayload<T>>>

    /**
     * Delete zero or more FridgeItems.
     * @param {FridgeItemDeleteManyArgs} args - Arguments to filter FridgeItems to delete.
     * @example
     * // Delete a few FridgeItems
     * const { count } = await prisma.fridgeItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FridgeItemDeleteManyArgs>(
      args?: SelectSubset<T, FridgeItemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more FridgeItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FridgeItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FridgeItems
     * const fridgeItem = await prisma.fridgeItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FridgeItemUpdateManyArgs>(
      args: SelectSubset<T, FridgeItemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one FridgeItem.
     * @param {FridgeItemUpsertArgs} args - Arguments to update or create a FridgeItem.
     * @example
     * // Update or create a FridgeItem
     * const fridgeItem = await prisma.fridgeItem.upsert({
     *   create: {
     *     // ... data to create a FridgeItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FridgeItem we want to update
     *   }
     * })
    **/
    upsert<T extends FridgeItemUpsertArgs>(
      args: SelectSubset<T, FridgeItemUpsertArgs>
    ): CheckSelect<T, Prisma__FridgeItemClient<FridgeItem>, Prisma__FridgeItemClient<FridgeItemGetPayload<T>>>

    /**
     * Count the number of FridgeItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FridgeItemCountArgs} args - Arguments to filter FridgeItems to count.
     * @example
     * // Count the number of FridgeItems
     * const count = await prisma.fridgeItem.count({
     *   where: {
     *     // ... the filter for the FridgeItems we want to count
     *   }
     * })
    **/
    count<T extends FridgeItemCountArgs>(
      args?: Subset<T, FridgeItemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FridgeItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FridgeItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FridgeItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FridgeItemAggregateArgs>(args: Subset<T, FridgeItemAggregateArgs>): PrismaPromise<GetFridgeItemAggregateType<T>>

    /**
     * Group by FridgeItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FridgeItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FridgeItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FridgeItemGroupByArgs['orderBy'] }
        : { orderBy?: FridgeItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FridgeItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFridgeItemGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for FridgeItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FridgeItemClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * FridgeItem findUnique
   */
  export type FridgeItemFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the FridgeItem
     * 
    **/
    select?: FridgeItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FridgeItemInclude | null
    /**
     * Throw an Error if a FridgeItem can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which FridgeItem to fetch.
     * 
    **/
    where: FridgeItemWhereUniqueInput
  }


  /**
   * FridgeItem findFirst
   */
  export type FridgeItemFindFirstArgs = {
    /**
     * Select specific fields to fetch from the FridgeItem
     * 
    **/
    select?: FridgeItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FridgeItemInclude | null
    /**
     * Throw an Error if a FridgeItem can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which FridgeItem to fetch.
     * 
    **/
    where?: FridgeItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FridgeItems to fetch.
     * 
    **/
    orderBy?: Enumerable<FridgeItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FridgeItems.
     * 
    **/
    cursor?: FridgeItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FridgeItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FridgeItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FridgeItems.
     * 
    **/
    distinct?: Enumerable<FridgeItemScalarFieldEnum>
  }


  /**
   * FridgeItem findMany
   */
  export type FridgeItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the FridgeItem
     * 
    **/
    select?: FridgeItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FridgeItemInclude | null
    /**
     * Filter, which FridgeItems to fetch.
     * 
    **/
    where?: FridgeItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FridgeItems to fetch.
     * 
    **/
    orderBy?: Enumerable<FridgeItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FridgeItems.
     * 
    **/
    cursor?: FridgeItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FridgeItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FridgeItems.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FridgeItemScalarFieldEnum>
  }


  /**
   * FridgeItem create
   */
  export type FridgeItemCreateArgs = {
    /**
     * Select specific fields to fetch from the FridgeItem
     * 
    **/
    select?: FridgeItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FridgeItemInclude | null
    /**
     * The data needed to create a FridgeItem.
     * 
    **/
    data: XOR<FridgeItemCreateInput, FridgeItemUncheckedCreateInput>
  }


  /**
   * FridgeItem createMany
   */
  export type FridgeItemCreateManyArgs = {
    /**
     * The data used to create many FridgeItems.
     * 
    **/
    data: Enumerable<FridgeItemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FridgeItem update
   */
  export type FridgeItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the FridgeItem
     * 
    **/
    select?: FridgeItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FridgeItemInclude | null
    /**
     * The data needed to update a FridgeItem.
     * 
    **/
    data: XOR<FridgeItemUpdateInput, FridgeItemUncheckedUpdateInput>
    /**
     * Choose, which FridgeItem to update.
     * 
    **/
    where: FridgeItemWhereUniqueInput
  }


  /**
   * FridgeItem updateMany
   */
  export type FridgeItemUpdateManyArgs = {
    /**
     * The data used to update FridgeItems.
     * 
    **/
    data: XOR<FridgeItemUpdateManyMutationInput, FridgeItemUncheckedUpdateManyInput>
    /**
     * Filter which FridgeItems to update
     * 
    **/
    where?: FridgeItemWhereInput
  }


  /**
   * FridgeItem upsert
   */
  export type FridgeItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the FridgeItem
     * 
    **/
    select?: FridgeItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FridgeItemInclude | null
    /**
     * The filter to search for the FridgeItem to update in case it exists.
     * 
    **/
    where: FridgeItemWhereUniqueInput
    /**
     * In case the FridgeItem found by the `where` argument doesn't exist, create a new FridgeItem with this data.
     * 
    **/
    create: XOR<FridgeItemCreateInput, FridgeItemUncheckedCreateInput>
    /**
     * In case the FridgeItem was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FridgeItemUpdateInput, FridgeItemUncheckedUpdateInput>
  }


  /**
   * FridgeItem delete
   */
  export type FridgeItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the FridgeItem
     * 
    **/
    select?: FridgeItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FridgeItemInclude | null
    /**
     * Filter which FridgeItem to delete.
     * 
    **/
    where: FridgeItemWhereUniqueInput
  }


  /**
   * FridgeItem deleteMany
   */
  export type FridgeItemDeleteManyArgs = {
    /**
     * Filter which FridgeItems to delete
     * 
    **/
    where?: FridgeItemWhereInput
  }


  /**
   * FridgeItem without action
   */
  export type FridgeItemArgs = {
    /**
     * Select specific fields to fetch from the FridgeItem
     * 
    **/
    select?: FridgeItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FridgeItemInclude | null
  }



  /**
   * Model Stat
   */


  export type AggregateStat = {
    _count: StatCountAggregateOutputType | null
    _min: StatMinAggregateOutputType | null
    _max: StatMaxAggregateOutputType | null
  }

  export type StatMinAggregateOutputType = {
    id: string | null
    userId: string | null
    data: string | null
  }

  export type StatMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    data: string | null
  }

  export type StatCountAggregateOutputType = {
    id: number
    userId: number
    data: number
    _all: number
  }


  export type StatMinAggregateInputType = {
    id?: true
    userId?: true
    data?: true
  }

  export type StatMaxAggregateInputType = {
    id?: true
    userId?: true
    data?: true
  }

  export type StatCountAggregateInputType = {
    id?: true
    userId?: true
    data?: true
    _all?: true
  }

  export type StatAggregateArgs = {
    /**
     * Filter which Stat to aggregate.
     * 
    **/
    where?: StatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     * 
    **/
    orderBy?: Enumerable<StatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stats
    **/
    _count?: true | StatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatMaxAggregateInputType
  }

  export type GetStatAggregateType<T extends StatAggregateArgs> = {
        [P in keyof T & keyof AggregateStat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStat[P]>
      : GetScalarType<T[P], AggregateStat[P]>
  }




  export type StatGroupByArgs = {
    where?: StatWhereInput
    orderBy?: Enumerable<StatOrderByWithAggregationInput>
    by: Array<StatScalarFieldEnum>
    having?: StatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatCountAggregateInputType | true
    _min?: StatMinAggregateInputType
    _max?: StatMaxAggregateInputType
  }


  export type StatGroupByOutputType = {
    id: string
    userId: string
    data: string
    _count: StatCountAggregateOutputType | null
    _min: StatMinAggregateOutputType | null
    _max: StatMaxAggregateOutputType | null
  }

  type GetStatGroupByPayload<T extends StatGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatGroupByOutputType[P]>
            : GetScalarType<T[P], StatGroupByOutputType[P]>
        }
      >
    >


  export type StatSelect = {
    id?: boolean
    userId?: boolean
    data?: boolean
    user?: boolean | UserArgs
  }

  export type StatInclude = {
    user?: boolean | UserArgs
  }

  export type StatGetPayload<
    S extends boolean | null | undefined | StatArgs,
    U = keyof S
      > = S extends true
        ? Stat
    : S extends undefined
    ? never
    : S extends StatArgs | StatFindManyArgs
    ?'include' extends U
    ? Stat  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Stat ? Stat[P] : never
  } 
    : Stat
  : Stat


  type StatCountArgs = Merge<
    Omit<StatFindManyArgs, 'select' | 'include'> & {
      select?: StatCountAggregateInputType | true
    }
  >

  export interface StatDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Stat that matches the filter.
     * @param {StatFindUniqueArgs} args - Arguments to find a Stat
     * @example
     * // Get one Stat
     * const stat = await prisma.stat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StatFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Stat'> extends True ? CheckSelect<T, Prisma__StatClient<Stat>, Prisma__StatClient<StatGetPayload<T>>> : CheckSelect<T, Prisma__StatClient<Stat | null >, Prisma__StatClient<StatGetPayload<T> | null >>

    /**
     * Find the first Stat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatFindFirstArgs} args - Arguments to find a Stat
     * @example
     * // Get one Stat
     * const stat = await prisma.stat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StatFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Stat'> extends True ? CheckSelect<T, Prisma__StatClient<Stat>, Prisma__StatClient<StatGetPayload<T>>> : CheckSelect<T, Prisma__StatClient<Stat | null >, Prisma__StatClient<StatGetPayload<T> | null >>

    /**
     * Find zero or more Stats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stats
     * const stats = await prisma.stat.findMany()
     * 
     * // Get first 10 Stats
     * const stats = await prisma.stat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statWithIdOnly = await prisma.stat.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatFindManyArgs>(
      args?: SelectSubset<T, StatFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Stat>>, PrismaPromise<Array<StatGetPayload<T>>>>

    /**
     * Create a Stat.
     * @param {StatCreateArgs} args - Arguments to create a Stat.
     * @example
     * // Create one Stat
     * const Stat = await prisma.stat.create({
     *   data: {
     *     // ... data to create a Stat
     *   }
     * })
     * 
    **/
    create<T extends StatCreateArgs>(
      args: SelectSubset<T, StatCreateArgs>
    ): CheckSelect<T, Prisma__StatClient<Stat>, Prisma__StatClient<StatGetPayload<T>>>

    /**
     * Create many Stats.
     *     @param {StatCreateManyArgs} args - Arguments to create many Stats.
     *     @example
     *     // Create many Stats
     *     const stat = await prisma.stat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatCreateManyArgs>(
      args?: SelectSubset<T, StatCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Stat.
     * @param {StatDeleteArgs} args - Arguments to delete one Stat.
     * @example
     * // Delete one Stat
     * const Stat = await prisma.stat.delete({
     *   where: {
     *     // ... filter to delete one Stat
     *   }
     * })
     * 
    **/
    delete<T extends StatDeleteArgs>(
      args: SelectSubset<T, StatDeleteArgs>
    ): CheckSelect<T, Prisma__StatClient<Stat>, Prisma__StatClient<StatGetPayload<T>>>

    /**
     * Update one Stat.
     * @param {StatUpdateArgs} args - Arguments to update one Stat.
     * @example
     * // Update one Stat
     * const stat = await prisma.stat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatUpdateArgs>(
      args: SelectSubset<T, StatUpdateArgs>
    ): CheckSelect<T, Prisma__StatClient<Stat>, Prisma__StatClient<StatGetPayload<T>>>

    /**
     * Delete zero or more Stats.
     * @param {StatDeleteManyArgs} args - Arguments to filter Stats to delete.
     * @example
     * // Delete a few Stats
     * const { count } = await prisma.stat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatDeleteManyArgs>(
      args?: SelectSubset<T, StatDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stats
     * const stat = await prisma.stat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatUpdateManyArgs>(
      args: SelectSubset<T, StatUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Stat.
     * @param {StatUpsertArgs} args - Arguments to update or create a Stat.
     * @example
     * // Update or create a Stat
     * const stat = await prisma.stat.upsert({
     *   create: {
     *     // ... data to create a Stat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stat we want to update
     *   }
     * })
    **/
    upsert<T extends StatUpsertArgs>(
      args: SelectSubset<T, StatUpsertArgs>
    ): CheckSelect<T, Prisma__StatClient<Stat>, Prisma__StatClient<StatGetPayload<T>>>

    /**
     * Count the number of Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatCountArgs} args - Arguments to filter Stats to count.
     * @example
     * // Count the number of Stats
     * const count = await prisma.stat.count({
     *   where: {
     *     // ... the filter for the Stats we want to count
     *   }
     * })
    **/
    count<T extends StatCountArgs>(
      args?: Subset<T, StatCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatAggregateArgs>(args: Subset<T, StatAggregateArgs>): PrismaPromise<GetStatAggregateType<T>>

    /**
     * Group by Stat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatGroupByArgs['orderBy'] }
        : { orderBy?: StatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StatClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Stat findUnique
   */
  export type StatFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Stat
     * 
    **/
    select?: StatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatInclude | null
    /**
     * Throw an Error if a Stat can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Stat to fetch.
     * 
    **/
    where: StatWhereUniqueInput
  }


  /**
   * Stat findFirst
   */
  export type StatFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Stat
     * 
    **/
    select?: StatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatInclude | null
    /**
     * Throw an Error if a Stat can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Stat to fetch.
     * 
    **/
    where?: StatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     * 
    **/
    orderBy?: Enumerable<StatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stats.
     * 
    **/
    cursor?: StatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stats.
     * 
    **/
    distinct?: Enumerable<StatScalarFieldEnum>
  }


  /**
   * Stat findMany
   */
  export type StatFindManyArgs = {
    /**
     * Select specific fields to fetch from the Stat
     * 
    **/
    select?: StatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatInclude | null
    /**
     * Filter, which Stats to fetch.
     * 
    **/
    where?: StatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     * 
    **/
    orderBy?: Enumerable<StatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stats.
     * 
    **/
    cursor?: StatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StatScalarFieldEnum>
  }


  /**
   * Stat create
   */
  export type StatCreateArgs = {
    /**
     * Select specific fields to fetch from the Stat
     * 
    **/
    select?: StatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatInclude | null
    /**
     * The data needed to create a Stat.
     * 
    **/
    data: XOR<StatCreateInput, StatUncheckedCreateInput>
  }


  /**
   * Stat createMany
   */
  export type StatCreateManyArgs = {
    /**
     * The data used to create many Stats.
     * 
    **/
    data: Enumerable<StatCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Stat update
   */
  export type StatUpdateArgs = {
    /**
     * Select specific fields to fetch from the Stat
     * 
    **/
    select?: StatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatInclude | null
    /**
     * The data needed to update a Stat.
     * 
    **/
    data: XOR<StatUpdateInput, StatUncheckedUpdateInput>
    /**
     * Choose, which Stat to update.
     * 
    **/
    where: StatWhereUniqueInput
  }


  /**
   * Stat updateMany
   */
  export type StatUpdateManyArgs = {
    /**
     * The data used to update Stats.
     * 
    **/
    data: XOR<StatUpdateManyMutationInput, StatUncheckedUpdateManyInput>
    /**
     * Filter which Stats to update
     * 
    **/
    where?: StatWhereInput
  }


  /**
   * Stat upsert
   */
  export type StatUpsertArgs = {
    /**
     * Select specific fields to fetch from the Stat
     * 
    **/
    select?: StatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatInclude | null
    /**
     * The filter to search for the Stat to update in case it exists.
     * 
    **/
    where: StatWhereUniqueInput
    /**
     * In case the Stat found by the `where` argument doesn't exist, create a new Stat with this data.
     * 
    **/
    create: XOR<StatCreateInput, StatUncheckedCreateInput>
    /**
     * In case the Stat was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StatUpdateInput, StatUncheckedUpdateInput>
  }


  /**
   * Stat delete
   */
  export type StatDeleteArgs = {
    /**
     * Select specific fields to fetch from the Stat
     * 
    **/
    select?: StatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatInclude | null
    /**
     * Filter which Stat to delete.
     * 
    **/
    where: StatWhereUniqueInput
  }


  /**
   * Stat deleteMany
   */
  export type StatDeleteManyArgs = {
    /**
     * Filter which Stats to delete
     * 
    **/
    where?: StatWhereInput
  }


  /**
   * Stat without action
   */
  export type StatArgs = {
    /**
     * Select specific fields to fetch from the Stat
     * 
    **/
    select?: StatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatInclude | null
  }



  /**
   * Model KnorrReward
   */


  export type AggregateKnorrReward = {
    _count: KnorrRewardCountAggregateOutputType | null
    _min: KnorrRewardMinAggregateOutputType | null
    _max: KnorrRewardMaxAggregateOutputType | null
  }

  export type KnorrRewardMinAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
  }

  export type KnorrRewardMaxAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
  }

  export type KnorrRewardCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    _all: number
  }


  export type KnorrRewardMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
  }

  export type KnorrRewardMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
  }

  export type KnorrRewardCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    _all?: true
  }

  export type KnorrRewardAggregateArgs = {
    /**
     * Filter which KnorrReward to aggregate.
     * 
    **/
    where?: KnorrRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnorrRewards to fetch.
     * 
    **/
    orderBy?: Enumerable<KnorrRewardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: KnorrRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnorrRewards from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnorrRewards.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KnorrRewards
    **/
    _count?: true | KnorrRewardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KnorrRewardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KnorrRewardMaxAggregateInputType
  }

  export type GetKnorrRewardAggregateType<T extends KnorrRewardAggregateArgs> = {
        [P in keyof T & keyof AggregateKnorrReward]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKnorrReward[P]>
      : GetScalarType<T[P], AggregateKnorrReward[P]>
  }




  export type KnorrRewardGroupByArgs = {
    where?: KnorrRewardWhereInput
    orderBy?: Enumerable<KnorrRewardOrderByWithAggregationInput>
    by: Array<KnorrRewardScalarFieldEnum>
    having?: KnorrRewardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KnorrRewardCountAggregateInputType | true
    _min?: KnorrRewardMinAggregateInputType
    _max?: KnorrRewardMaxAggregateInputType
  }


  export type KnorrRewardGroupByOutputType = {
    id: string
    name: string
    userId: string
    _count: KnorrRewardCountAggregateOutputType | null
    _min: KnorrRewardMinAggregateOutputType | null
    _max: KnorrRewardMaxAggregateOutputType | null
  }

  type GetKnorrRewardGroupByPayload<T extends KnorrRewardGroupByArgs> = PrismaPromise<
    Array<
      PickArray<KnorrRewardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KnorrRewardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KnorrRewardGroupByOutputType[P]>
            : GetScalarType<T[P], KnorrRewardGroupByOutputType[P]>
        }
      >
    >


  export type KnorrRewardSelect = {
    id?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserArgs
  }

  export type KnorrRewardInclude = {
    user?: boolean | UserArgs
  }

  export type KnorrRewardGetPayload<
    S extends boolean | null | undefined | KnorrRewardArgs,
    U = keyof S
      > = S extends true
        ? KnorrReward
    : S extends undefined
    ? never
    : S extends KnorrRewardArgs | KnorrRewardFindManyArgs
    ?'include' extends U
    ? KnorrReward  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof KnorrReward ? KnorrReward[P] : never
  } 
    : KnorrReward
  : KnorrReward


  type KnorrRewardCountArgs = Merge<
    Omit<KnorrRewardFindManyArgs, 'select' | 'include'> & {
      select?: KnorrRewardCountAggregateInputType | true
    }
  >

  export interface KnorrRewardDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one KnorrReward that matches the filter.
     * @param {KnorrRewardFindUniqueArgs} args - Arguments to find a KnorrReward
     * @example
     * // Get one KnorrReward
     * const knorrReward = await prisma.knorrReward.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KnorrRewardFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, KnorrRewardFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'KnorrReward'> extends True ? CheckSelect<T, Prisma__KnorrRewardClient<KnorrReward>, Prisma__KnorrRewardClient<KnorrRewardGetPayload<T>>> : CheckSelect<T, Prisma__KnorrRewardClient<KnorrReward | null >, Prisma__KnorrRewardClient<KnorrRewardGetPayload<T> | null >>

    /**
     * Find the first KnorrReward that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrRewardFindFirstArgs} args - Arguments to find a KnorrReward
     * @example
     * // Get one KnorrReward
     * const knorrReward = await prisma.knorrReward.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KnorrRewardFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, KnorrRewardFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'KnorrReward'> extends True ? CheckSelect<T, Prisma__KnorrRewardClient<KnorrReward>, Prisma__KnorrRewardClient<KnorrRewardGetPayload<T>>> : CheckSelect<T, Prisma__KnorrRewardClient<KnorrReward | null >, Prisma__KnorrRewardClient<KnorrRewardGetPayload<T> | null >>

    /**
     * Find zero or more KnorrRewards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrRewardFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KnorrRewards
     * const knorrRewards = await prisma.knorrReward.findMany()
     * 
     * // Get first 10 KnorrRewards
     * const knorrRewards = await prisma.knorrReward.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const knorrRewardWithIdOnly = await prisma.knorrReward.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KnorrRewardFindManyArgs>(
      args?: SelectSubset<T, KnorrRewardFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<KnorrReward>>, PrismaPromise<Array<KnorrRewardGetPayload<T>>>>

    /**
     * Create a KnorrReward.
     * @param {KnorrRewardCreateArgs} args - Arguments to create a KnorrReward.
     * @example
     * // Create one KnorrReward
     * const KnorrReward = await prisma.knorrReward.create({
     *   data: {
     *     // ... data to create a KnorrReward
     *   }
     * })
     * 
    **/
    create<T extends KnorrRewardCreateArgs>(
      args: SelectSubset<T, KnorrRewardCreateArgs>
    ): CheckSelect<T, Prisma__KnorrRewardClient<KnorrReward>, Prisma__KnorrRewardClient<KnorrRewardGetPayload<T>>>

    /**
     * Create many KnorrRewards.
     *     @param {KnorrRewardCreateManyArgs} args - Arguments to create many KnorrRewards.
     *     @example
     *     // Create many KnorrRewards
     *     const knorrReward = await prisma.knorrReward.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KnorrRewardCreateManyArgs>(
      args?: SelectSubset<T, KnorrRewardCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a KnorrReward.
     * @param {KnorrRewardDeleteArgs} args - Arguments to delete one KnorrReward.
     * @example
     * // Delete one KnorrReward
     * const KnorrReward = await prisma.knorrReward.delete({
     *   where: {
     *     // ... filter to delete one KnorrReward
     *   }
     * })
     * 
    **/
    delete<T extends KnorrRewardDeleteArgs>(
      args: SelectSubset<T, KnorrRewardDeleteArgs>
    ): CheckSelect<T, Prisma__KnorrRewardClient<KnorrReward>, Prisma__KnorrRewardClient<KnorrRewardGetPayload<T>>>

    /**
     * Update one KnorrReward.
     * @param {KnorrRewardUpdateArgs} args - Arguments to update one KnorrReward.
     * @example
     * // Update one KnorrReward
     * const knorrReward = await prisma.knorrReward.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KnorrRewardUpdateArgs>(
      args: SelectSubset<T, KnorrRewardUpdateArgs>
    ): CheckSelect<T, Prisma__KnorrRewardClient<KnorrReward>, Prisma__KnorrRewardClient<KnorrRewardGetPayload<T>>>

    /**
     * Delete zero or more KnorrRewards.
     * @param {KnorrRewardDeleteManyArgs} args - Arguments to filter KnorrRewards to delete.
     * @example
     * // Delete a few KnorrRewards
     * const { count } = await prisma.knorrReward.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KnorrRewardDeleteManyArgs>(
      args?: SelectSubset<T, KnorrRewardDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more KnorrRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrRewardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KnorrRewards
     * const knorrReward = await prisma.knorrReward.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KnorrRewardUpdateManyArgs>(
      args: SelectSubset<T, KnorrRewardUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one KnorrReward.
     * @param {KnorrRewardUpsertArgs} args - Arguments to update or create a KnorrReward.
     * @example
     * // Update or create a KnorrReward
     * const knorrReward = await prisma.knorrReward.upsert({
     *   create: {
     *     // ... data to create a KnorrReward
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KnorrReward we want to update
     *   }
     * })
    **/
    upsert<T extends KnorrRewardUpsertArgs>(
      args: SelectSubset<T, KnorrRewardUpsertArgs>
    ): CheckSelect<T, Prisma__KnorrRewardClient<KnorrReward>, Prisma__KnorrRewardClient<KnorrRewardGetPayload<T>>>

    /**
     * Count the number of KnorrRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrRewardCountArgs} args - Arguments to filter KnorrRewards to count.
     * @example
     * // Count the number of KnorrRewards
     * const count = await prisma.knorrReward.count({
     *   where: {
     *     // ... the filter for the KnorrRewards we want to count
     *   }
     * })
    **/
    count<T extends KnorrRewardCountArgs>(
      args?: Subset<T, KnorrRewardCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KnorrRewardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KnorrReward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrRewardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KnorrRewardAggregateArgs>(args: Subset<T, KnorrRewardAggregateArgs>): PrismaPromise<GetKnorrRewardAggregateType<T>>

    /**
     * Group by KnorrReward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnorrRewardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KnorrRewardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KnorrRewardGroupByArgs['orderBy'] }
        : { orderBy?: KnorrRewardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KnorrRewardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKnorrRewardGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for KnorrReward.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__KnorrRewardClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * KnorrReward findUnique
   */
  export type KnorrRewardFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the KnorrReward
     * 
    **/
    select?: KnorrRewardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrRewardInclude | null
    /**
     * Throw an Error if a KnorrReward can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which KnorrReward to fetch.
     * 
    **/
    where: KnorrRewardWhereUniqueInput
  }


  /**
   * KnorrReward findFirst
   */
  export type KnorrRewardFindFirstArgs = {
    /**
     * Select specific fields to fetch from the KnorrReward
     * 
    **/
    select?: KnorrRewardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrRewardInclude | null
    /**
     * Throw an Error if a KnorrReward can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which KnorrReward to fetch.
     * 
    **/
    where?: KnorrRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnorrRewards to fetch.
     * 
    **/
    orderBy?: Enumerable<KnorrRewardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KnorrRewards.
     * 
    **/
    cursor?: KnorrRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnorrRewards from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnorrRewards.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KnorrRewards.
     * 
    **/
    distinct?: Enumerable<KnorrRewardScalarFieldEnum>
  }


  /**
   * KnorrReward findMany
   */
  export type KnorrRewardFindManyArgs = {
    /**
     * Select specific fields to fetch from the KnorrReward
     * 
    **/
    select?: KnorrRewardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrRewardInclude | null
    /**
     * Filter, which KnorrRewards to fetch.
     * 
    **/
    where?: KnorrRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnorrRewards to fetch.
     * 
    **/
    orderBy?: Enumerable<KnorrRewardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KnorrRewards.
     * 
    **/
    cursor?: KnorrRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnorrRewards from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnorrRewards.
     * 
    **/
    skip?: number
    distinct?: Enumerable<KnorrRewardScalarFieldEnum>
  }


  /**
   * KnorrReward create
   */
  export type KnorrRewardCreateArgs = {
    /**
     * Select specific fields to fetch from the KnorrReward
     * 
    **/
    select?: KnorrRewardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrRewardInclude | null
    /**
     * The data needed to create a KnorrReward.
     * 
    **/
    data: XOR<KnorrRewardCreateInput, KnorrRewardUncheckedCreateInput>
  }


  /**
   * KnorrReward createMany
   */
  export type KnorrRewardCreateManyArgs = {
    /**
     * The data used to create many KnorrRewards.
     * 
    **/
    data: Enumerable<KnorrRewardCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * KnorrReward update
   */
  export type KnorrRewardUpdateArgs = {
    /**
     * Select specific fields to fetch from the KnorrReward
     * 
    **/
    select?: KnorrRewardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrRewardInclude | null
    /**
     * The data needed to update a KnorrReward.
     * 
    **/
    data: XOR<KnorrRewardUpdateInput, KnorrRewardUncheckedUpdateInput>
    /**
     * Choose, which KnorrReward to update.
     * 
    **/
    where: KnorrRewardWhereUniqueInput
  }


  /**
   * KnorrReward updateMany
   */
  export type KnorrRewardUpdateManyArgs = {
    /**
     * The data used to update KnorrRewards.
     * 
    **/
    data: XOR<KnorrRewardUpdateManyMutationInput, KnorrRewardUncheckedUpdateManyInput>
    /**
     * Filter which KnorrRewards to update
     * 
    **/
    where?: KnorrRewardWhereInput
  }


  /**
   * KnorrReward upsert
   */
  export type KnorrRewardUpsertArgs = {
    /**
     * Select specific fields to fetch from the KnorrReward
     * 
    **/
    select?: KnorrRewardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrRewardInclude | null
    /**
     * The filter to search for the KnorrReward to update in case it exists.
     * 
    **/
    where: KnorrRewardWhereUniqueInput
    /**
     * In case the KnorrReward found by the `where` argument doesn't exist, create a new KnorrReward with this data.
     * 
    **/
    create: XOR<KnorrRewardCreateInput, KnorrRewardUncheckedCreateInput>
    /**
     * In case the KnorrReward was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<KnorrRewardUpdateInput, KnorrRewardUncheckedUpdateInput>
  }


  /**
   * KnorrReward delete
   */
  export type KnorrRewardDeleteArgs = {
    /**
     * Select specific fields to fetch from the KnorrReward
     * 
    **/
    select?: KnorrRewardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrRewardInclude | null
    /**
     * Filter which KnorrReward to delete.
     * 
    **/
    where: KnorrRewardWhereUniqueInput
  }


  /**
   * KnorrReward deleteMany
   */
  export type KnorrRewardDeleteManyArgs = {
    /**
     * Filter which KnorrRewards to delete
     * 
    **/
    where?: KnorrRewardWhereInput
  }


  /**
   * KnorrReward without action
   */
  export type KnorrRewardArgs = {
    /**
     * Select specific fields to fetch from the KnorrReward
     * 
    **/
    select?: KnorrRewardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KnorrRewardInclude | null
  }



  /**
   * Model UserChallenge
   */


  export type AggregateUserChallenge = {
    _count: UserChallengeCountAggregateOutputType | null
    _min: UserChallengeMinAggregateOutputType | null
    _max: UserChallengeMaxAggregateOutputType | null
  }

  export type UserChallengeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    challenge: string | null
  }

  export type UserChallengeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    challenge: string | null
  }

  export type UserChallengeCountAggregateOutputType = {
    id: number
    userId: number
    challenge: number
    _all: number
  }


  export type UserChallengeMinAggregateInputType = {
    id?: true
    userId?: true
    challenge?: true
  }

  export type UserChallengeMaxAggregateInputType = {
    id?: true
    userId?: true
    challenge?: true
  }

  export type UserChallengeCountAggregateInputType = {
    id?: true
    userId?: true
    challenge?: true
    _all?: true
  }

  export type UserChallengeAggregateArgs = {
    /**
     * Filter which UserChallenge to aggregate.
     * 
    **/
    where?: UserChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserChallenges to fetch.
     * 
    **/
    orderBy?: Enumerable<UserChallengeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserChallenges from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserChallenges.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserChallenges
    **/
    _count?: true | UserChallengeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserChallengeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserChallengeMaxAggregateInputType
  }

  export type GetUserChallengeAggregateType<T extends UserChallengeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserChallenge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserChallenge[P]>
      : GetScalarType<T[P], AggregateUserChallenge[P]>
  }




  export type UserChallengeGroupByArgs = {
    where?: UserChallengeWhereInput
    orderBy?: Enumerable<UserChallengeOrderByWithAggregationInput>
    by: Array<UserChallengeScalarFieldEnum>
    having?: UserChallengeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserChallengeCountAggregateInputType | true
    _min?: UserChallengeMinAggregateInputType
    _max?: UserChallengeMaxAggregateInputType
  }


  export type UserChallengeGroupByOutputType = {
    id: string
    userId: string
    challenge: string
    _count: UserChallengeCountAggregateOutputType | null
    _min: UserChallengeMinAggregateOutputType | null
    _max: UserChallengeMaxAggregateOutputType | null
  }

  type GetUserChallengeGroupByPayload<T extends UserChallengeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserChallengeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserChallengeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserChallengeGroupByOutputType[P]>
            : GetScalarType<T[P], UserChallengeGroupByOutputType[P]>
        }
      >
    >


  export type UserChallengeSelect = {
    id?: boolean
    userId?: boolean
    challenge?: boolean
    user?: boolean | UserArgs
  }

  export type UserChallengeInclude = {
    user?: boolean | UserArgs
  }

  export type UserChallengeGetPayload<
    S extends boolean | null | undefined | UserChallengeArgs,
    U = keyof S
      > = S extends true
        ? UserChallenge
    : S extends undefined
    ? never
    : S extends UserChallengeArgs | UserChallengeFindManyArgs
    ?'include' extends U
    ? UserChallenge  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof UserChallenge ? UserChallenge[P] : never
  } 
    : UserChallenge
  : UserChallenge


  type UserChallengeCountArgs = Merge<
    Omit<UserChallengeFindManyArgs, 'select' | 'include'> & {
      select?: UserChallengeCountAggregateInputType | true
    }
  >

  export interface UserChallengeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserChallenge that matches the filter.
     * @param {UserChallengeFindUniqueArgs} args - Arguments to find a UserChallenge
     * @example
     * // Get one UserChallenge
     * const userChallenge = await prisma.userChallenge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserChallengeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserChallengeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserChallenge'> extends True ? CheckSelect<T, Prisma__UserChallengeClient<UserChallenge>, Prisma__UserChallengeClient<UserChallengeGetPayload<T>>> : CheckSelect<T, Prisma__UserChallengeClient<UserChallenge | null >, Prisma__UserChallengeClient<UserChallengeGetPayload<T> | null >>

    /**
     * Find the first UserChallenge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChallengeFindFirstArgs} args - Arguments to find a UserChallenge
     * @example
     * // Get one UserChallenge
     * const userChallenge = await prisma.userChallenge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserChallengeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserChallengeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserChallenge'> extends True ? CheckSelect<T, Prisma__UserChallengeClient<UserChallenge>, Prisma__UserChallengeClient<UserChallengeGetPayload<T>>> : CheckSelect<T, Prisma__UserChallengeClient<UserChallenge | null >, Prisma__UserChallengeClient<UserChallengeGetPayload<T> | null >>

    /**
     * Find zero or more UserChallenges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChallengeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserChallenges
     * const userChallenges = await prisma.userChallenge.findMany()
     * 
     * // Get first 10 UserChallenges
     * const userChallenges = await prisma.userChallenge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userChallengeWithIdOnly = await prisma.userChallenge.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserChallengeFindManyArgs>(
      args?: SelectSubset<T, UserChallengeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserChallenge>>, PrismaPromise<Array<UserChallengeGetPayload<T>>>>

    /**
     * Create a UserChallenge.
     * @param {UserChallengeCreateArgs} args - Arguments to create a UserChallenge.
     * @example
     * // Create one UserChallenge
     * const UserChallenge = await prisma.userChallenge.create({
     *   data: {
     *     // ... data to create a UserChallenge
     *   }
     * })
     * 
    **/
    create<T extends UserChallengeCreateArgs>(
      args: SelectSubset<T, UserChallengeCreateArgs>
    ): CheckSelect<T, Prisma__UserChallengeClient<UserChallenge>, Prisma__UserChallengeClient<UserChallengeGetPayload<T>>>

    /**
     * Create many UserChallenges.
     *     @param {UserChallengeCreateManyArgs} args - Arguments to create many UserChallenges.
     *     @example
     *     // Create many UserChallenges
     *     const userChallenge = await prisma.userChallenge.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserChallengeCreateManyArgs>(
      args?: SelectSubset<T, UserChallengeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserChallenge.
     * @param {UserChallengeDeleteArgs} args - Arguments to delete one UserChallenge.
     * @example
     * // Delete one UserChallenge
     * const UserChallenge = await prisma.userChallenge.delete({
     *   where: {
     *     // ... filter to delete one UserChallenge
     *   }
     * })
     * 
    **/
    delete<T extends UserChallengeDeleteArgs>(
      args: SelectSubset<T, UserChallengeDeleteArgs>
    ): CheckSelect<T, Prisma__UserChallengeClient<UserChallenge>, Prisma__UserChallengeClient<UserChallengeGetPayload<T>>>

    /**
     * Update one UserChallenge.
     * @param {UserChallengeUpdateArgs} args - Arguments to update one UserChallenge.
     * @example
     * // Update one UserChallenge
     * const userChallenge = await prisma.userChallenge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserChallengeUpdateArgs>(
      args: SelectSubset<T, UserChallengeUpdateArgs>
    ): CheckSelect<T, Prisma__UserChallengeClient<UserChallenge>, Prisma__UserChallengeClient<UserChallengeGetPayload<T>>>

    /**
     * Delete zero or more UserChallenges.
     * @param {UserChallengeDeleteManyArgs} args - Arguments to filter UserChallenges to delete.
     * @example
     * // Delete a few UserChallenges
     * const { count } = await prisma.userChallenge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserChallengeDeleteManyArgs>(
      args?: SelectSubset<T, UserChallengeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserChallenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChallengeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserChallenges
     * const userChallenge = await prisma.userChallenge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserChallengeUpdateManyArgs>(
      args: SelectSubset<T, UserChallengeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserChallenge.
     * @param {UserChallengeUpsertArgs} args - Arguments to update or create a UserChallenge.
     * @example
     * // Update or create a UserChallenge
     * const userChallenge = await prisma.userChallenge.upsert({
     *   create: {
     *     // ... data to create a UserChallenge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserChallenge we want to update
     *   }
     * })
    **/
    upsert<T extends UserChallengeUpsertArgs>(
      args: SelectSubset<T, UserChallengeUpsertArgs>
    ): CheckSelect<T, Prisma__UserChallengeClient<UserChallenge>, Prisma__UserChallengeClient<UserChallengeGetPayload<T>>>

    /**
     * Count the number of UserChallenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChallengeCountArgs} args - Arguments to filter UserChallenges to count.
     * @example
     * // Count the number of UserChallenges
     * const count = await prisma.userChallenge.count({
     *   where: {
     *     // ... the filter for the UserChallenges we want to count
     *   }
     * })
    **/
    count<T extends UserChallengeCountArgs>(
      args?: Subset<T, UserChallengeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserChallengeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserChallenge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChallengeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserChallengeAggregateArgs>(args: Subset<T, UserChallengeAggregateArgs>): PrismaPromise<GetUserChallengeAggregateType<T>>

    /**
     * Group by UserChallenge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChallengeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserChallengeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserChallengeGroupByArgs['orderBy'] }
        : { orderBy?: UserChallengeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserChallengeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserChallengeGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserChallenge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserChallengeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserChallenge findUnique
   */
  export type UserChallengeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserChallenge
     * 
    **/
    select?: UserChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserChallengeInclude | null
    /**
     * Throw an Error if a UserChallenge can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserChallenge to fetch.
     * 
    **/
    where: UserChallengeWhereUniqueInput
  }


  /**
   * UserChallenge findFirst
   */
  export type UserChallengeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserChallenge
     * 
    **/
    select?: UserChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserChallengeInclude | null
    /**
     * Throw an Error if a UserChallenge can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserChallenge to fetch.
     * 
    **/
    where?: UserChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserChallenges to fetch.
     * 
    **/
    orderBy?: Enumerable<UserChallengeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserChallenges.
     * 
    **/
    cursor?: UserChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserChallenges from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserChallenges.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserChallenges.
     * 
    **/
    distinct?: Enumerable<UserChallengeScalarFieldEnum>
  }


  /**
   * UserChallenge findMany
   */
  export type UserChallengeFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserChallenge
     * 
    **/
    select?: UserChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserChallengeInclude | null
    /**
     * Filter, which UserChallenges to fetch.
     * 
    **/
    where?: UserChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserChallenges to fetch.
     * 
    **/
    orderBy?: Enumerable<UserChallengeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserChallenges.
     * 
    **/
    cursor?: UserChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserChallenges from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserChallenges.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserChallengeScalarFieldEnum>
  }


  /**
   * UserChallenge create
   */
  export type UserChallengeCreateArgs = {
    /**
     * Select specific fields to fetch from the UserChallenge
     * 
    **/
    select?: UserChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserChallengeInclude | null
    /**
     * The data needed to create a UserChallenge.
     * 
    **/
    data: XOR<UserChallengeCreateInput, UserChallengeUncheckedCreateInput>
  }


  /**
   * UserChallenge createMany
   */
  export type UserChallengeCreateManyArgs = {
    /**
     * The data used to create many UserChallenges.
     * 
    **/
    data: Enumerable<UserChallengeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserChallenge update
   */
  export type UserChallengeUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserChallenge
     * 
    **/
    select?: UserChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserChallengeInclude | null
    /**
     * The data needed to update a UserChallenge.
     * 
    **/
    data: XOR<UserChallengeUpdateInput, UserChallengeUncheckedUpdateInput>
    /**
     * Choose, which UserChallenge to update.
     * 
    **/
    where: UserChallengeWhereUniqueInput
  }


  /**
   * UserChallenge updateMany
   */
  export type UserChallengeUpdateManyArgs = {
    /**
     * The data used to update UserChallenges.
     * 
    **/
    data: XOR<UserChallengeUpdateManyMutationInput, UserChallengeUncheckedUpdateManyInput>
    /**
     * Filter which UserChallenges to update
     * 
    **/
    where?: UserChallengeWhereInput
  }


  /**
   * UserChallenge upsert
   */
  export type UserChallengeUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserChallenge
     * 
    **/
    select?: UserChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserChallengeInclude | null
    /**
     * The filter to search for the UserChallenge to update in case it exists.
     * 
    **/
    where: UserChallengeWhereUniqueInput
    /**
     * In case the UserChallenge found by the `where` argument doesn't exist, create a new UserChallenge with this data.
     * 
    **/
    create: XOR<UserChallengeCreateInput, UserChallengeUncheckedCreateInput>
    /**
     * In case the UserChallenge was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserChallengeUpdateInput, UserChallengeUncheckedUpdateInput>
  }


  /**
   * UserChallenge delete
   */
  export type UserChallengeDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserChallenge
     * 
    **/
    select?: UserChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserChallengeInclude | null
    /**
     * Filter which UserChallenge to delete.
     * 
    **/
    where: UserChallengeWhereUniqueInput
  }


  /**
   * UserChallenge deleteMany
   */
  export type UserChallengeDeleteManyArgs = {
    /**
     * Filter which UserChallenges to delete
     * 
    **/
    where?: UserChallengeWhereInput
  }


  /**
   * UserChallenge without action
   */
  export type UserChallengeArgs = {
    /**
     * Select specific fields to fetch from the UserChallenge
     * 
    **/
    select?: UserChallengeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserChallengeInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    displayName: 'displayName',
    avatarUrl: 'avatarUrl',
    country: 'country',
    dob: 'dob',
    allergies: 'allergies',
    preferences: 'preferences',
    dietStyle: 'dietStyle',
    productsToAvoid: 'productsToAvoid',
    budget: 'budget',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const KnorrPostScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    content: 'content',
    imageUrl: 'imageUrl',
    imageMimeType: 'imageMimeType',
    hashtags: 'hashtags',
    knorrProducts: 'knorrProducts',
    isRecipe: 'isRecipe',
    prepTime: 'prepTime',
    cookTime: 'cookTime',
    servings: 'servings',
    difficulty: 'difficulty',
    views: 'views',
    likes: 'likes',
    shares: 'shares',
    comments: 'comments',
    createdAt: 'createdAt'
  };

  export type KnorrPostScalarFieldEnum = (typeof KnorrPostScalarFieldEnum)[keyof typeof KnorrPostScalarFieldEnum]


  export const KnorrUserProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    knorrLevel: 'knorrLevel',
    knorrXP: 'knorrXP',
    rewardPoints: 'rewardPoints',
    badges: 'badges',
    followers: 'followers',
    following: 'following',
    likedPosts: 'likedPosts',
    savedPosts: 'savedPosts',
    totalPosts: 'totalPosts',
    totalViews: 'totalViews',
    totalLikes: 'totalLikes',
    totalComments: 'totalComments',
    totalShares: 'totalShares',
    createdAt: 'createdAt'
  };

  export type KnorrUserProfileScalarFieldEnum = (typeof KnorrUserProfileScalarFieldEnum)[keyof typeof KnorrUserProfileScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    userId: 'userId',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const ShoppingListScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    items: 'items'
  };

  export type ShoppingListScalarFieldEnum = (typeof ShoppingListScalarFieldEnum)[keyof typeof ShoppingListScalarFieldEnum]


  export const FridgeItemScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    quantity: 'quantity',
    expiryDate: 'expiryDate',
    zone: 'zone',
    category: 'category',
    addedAt: 'addedAt'
  };

  export type FridgeItemScalarFieldEnum = (typeof FridgeItemScalarFieldEnum)[keyof typeof FridgeItemScalarFieldEnum]


  export const StatScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    data: 'data'
  };

  export type StatScalarFieldEnum = (typeof StatScalarFieldEnum)[keyof typeof StatScalarFieldEnum]


  export const KnorrRewardScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId'
  };

  export type KnorrRewardScalarFieldEnum = (typeof KnorrRewardScalarFieldEnum)[keyof typeof KnorrRewardScalarFieldEnum]


  export const UserChallengeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    challenge: 'challenge'
  };

  export type UserChallengeScalarFieldEnum = (typeof UserChallengeScalarFieldEnum)[keyof typeof UserChallengeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    password?: StringNullableFilter | string | null
    displayName?: StringNullableFilter | string | null
    avatarUrl?: StringNullableFilter | string | null
    country?: StringNullableFilter | string | null
    dob?: DateTimeNullableFilter | Date | string | null
    allergies?: StringNullableFilter | string | null
    preferences?: StringNullableFilter | string | null
    dietStyle?: StringNullableFilter | string | null
    productsToAvoid?: StringNullableFilter | string | null
    budget?: FloatNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
    knorrPosts?: KnorrPostListRelationFilter
    knorrUserProfiles?: KnorrUserProfileListRelationFilter
    comments?: CommentListRelationFilter
    shoppingLists?: ShoppingListListRelationFilter
    fridgeItems?: FridgeItemListRelationFilter
    stats?: StatListRelationFilter
    rewards?: KnorrRewardListRelationFilter
    challenges?: UserChallengeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    avatarUrl?: SortOrder
    country?: SortOrder
    dob?: SortOrder
    allergies?: SortOrder
    preferences?: SortOrder
    dietStyle?: SortOrder
    productsToAvoid?: SortOrder
    budget?: SortOrder
    createdAt?: SortOrder
    knorrPosts?: KnorrPostOrderByRelationAggregateInput
    knorrUserProfiles?: KnorrUserProfileOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    shoppingLists?: ShoppingListOrderByRelationAggregateInput
    fridgeItems?: FridgeItemOrderByRelationAggregateInput
    stats?: StatOrderByRelationAggregateInput
    rewards?: KnorrRewardOrderByRelationAggregateInput
    challenges?: UserChallengeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    avatarUrl?: SortOrder
    country?: SortOrder
    dob?: SortOrder
    allergies?: SortOrder
    preferences?: SortOrder
    dietStyle?: SortOrder
    productsToAvoid?: SortOrder
    budget?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringNullableWithAggregatesFilter | string | null
    displayName?: StringNullableWithAggregatesFilter | string | null
    avatarUrl?: StringNullableWithAggregatesFilter | string | null
    country?: StringNullableWithAggregatesFilter | string | null
    dob?: DateTimeNullableWithAggregatesFilter | Date | string | null
    allergies?: StringNullableWithAggregatesFilter | string | null
    preferences?: StringNullableWithAggregatesFilter | string | null
    dietStyle?: StringNullableWithAggregatesFilter | string | null
    productsToAvoid?: StringNullableWithAggregatesFilter | string | null
    budget?: FloatNullableWithAggregatesFilter | number | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type KnorrPostWhereInput = {
    AND?: Enumerable<KnorrPostWhereInput>
    OR?: Enumerable<KnorrPostWhereInput>
    NOT?: Enumerable<KnorrPostWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    content?: StringNullableFilter | string | null
    imageUrl?: StringNullableFilter | string | null
    imageMimeType?: StringNullableFilter | string | null
    hashtags?: StringNullableFilter | string | null
    knorrProducts?: StringNullableFilter | string | null
    isRecipe?: BoolFilter | boolean
    prepTime?: StringNullableFilter | string | null
    cookTime?: StringNullableFilter | string | null
    servings?: StringNullableFilter | string | null
    difficulty?: StringNullableFilter | string | null
    views?: IntFilter | number
    likes?: IntFilter | number
    shares?: IntFilter | number
    comments?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    postComments?: CommentListRelationFilter
  }

  export type KnorrPostOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    imageMimeType?: SortOrder
    hashtags?: SortOrder
    knorrProducts?: SortOrder
    isRecipe?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    difficulty?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    shares?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    postComments?: CommentOrderByRelationAggregateInput
  }

  export type KnorrPostWhereUniqueInput = {
    id?: string
  }

  export type KnorrPostOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    imageMimeType?: SortOrder
    hashtags?: SortOrder
    knorrProducts?: SortOrder
    isRecipe?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    difficulty?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    shares?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    _count?: KnorrPostCountOrderByAggregateInput
    _avg?: KnorrPostAvgOrderByAggregateInput
    _max?: KnorrPostMaxOrderByAggregateInput
    _min?: KnorrPostMinOrderByAggregateInput
    _sum?: KnorrPostSumOrderByAggregateInput
  }

  export type KnorrPostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<KnorrPostScalarWhereWithAggregatesInput>
    OR?: Enumerable<KnorrPostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<KnorrPostScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    content?: StringNullableWithAggregatesFilter | string | null
    imageUrl?: StringNullableWithAggregatesFilter | string | null
    imageMimeType?: StringNullableWithAggregatesFilter | string | null
    hashtags?: StringNullableWithAggregatesFilter | string | null
    knorrProducts?: StringNullableWithAggregatesFilter | string | null
    isRecipe?: BoolWithAggregatesFilter | boolean
    prepTime?: StringNullableWithAggregatesFilter | string | null
    cookTime?: StringNullableWithAggregatesFilter | string | null
    servings?: StringNullableWithAggregatesFilter | string | null
    difficulty?: StringNullableWithAggregatesFilter | string | null
    views?: IntWithAggregatesFilter | number
    likes?: IntWithAggregatesFilter | number
    shares?: IntWithAggregatesFilter | number
    comments?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type KnorrUserProfileWhereInput = {
    AND?: Enumerable<KnorrUserProfileWhereInput>
    OR?: Enumerable<KnorrUserProfileWhereInput>
    NOT?: Enumerable<KnorrUserProfileWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    knorrLevel?: IntFilter | number
    knorrXP?: IntFilter | number
    rewardPoints?: IntFilter | number
    badges?: StringNullableFilter | string | null
    followers?: StringNullableFilter | string | null
    following?: StringNullableFilter | string | null
    likedPosts?: StringNullableFilter | string | null
    savedPosts?: StringNullableFilter | string | null
    totalPosts?: IntFilter | number
    totalViews?: IntFilter | number
    totalLikes?: IntFilter | number
    totalComments?: IntFilter | number
    totalShares?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type KnorrUserProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    knorrLevel?: SortOrder
    knorrXP?: SortOrder
    rewardPoints?: SortOrder
    badges?: SortOrder
    followers?: SortOrder
    following?: SortOrder
    likedPosts?: SortOrder
    savedPosts?: SortOrder
    totalPosts?: SortOrder
    totalViews?: SortOrder
    totalLikes?: SortOrder
    totalComments?: SortOrder
    totalShares?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type KnorrUserProfileWhereUniqueInput = {
    id?: string
    userId?: string
  }

  export type KnorrUserProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    knorrLevel?: SortOrder
    knorrXP?: SortOrder
    rewardPoints?: SortOrder
    badges?: SortOrder
    followers?: SortOrder
    following?: SortOrder
    likedPosts?: SortOrder
    savedPosts?: SortOrder
    totalPosts?: SortOrder
    totalViews?: SortOrder
    totalLikes?: SortOrder
    totalComments?: SortOrder
    totalShares?: SortOrder
    createdAt?: SortOrder
    _count?: KnorrUserProfileCountOrderByAggregateInput
    _avg?: KnorrUserProfileAvgOrderByAggregateInput
    _max?: KnorrUserProfileMaxOrderByAggregateInput
    _min?: KnorrUserProfileMinOrderByAggregateInput
    _sum?: KnorrUserProfileSumOrderByAggregateInput
  }

  export type KnorrUserProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<KnorrUserProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<KnorrUserProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<KnorrUserProfileScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    knorrLevel?: IntWithAggregatesFilter | number
    knorrXP?: IntWithAggregatesFilter | number
    rewardPoints?: IntWithAggregatesFilter | number
    badges?: StringNullableWithAggregatesFilter | string | null
    followers?: StringNullableWithAggregatesFilter | string | null
    following?: StringNullableWithAggregatesFilter | string | null
    likedPosts?: StringNullableWithAggregatesFilter | string | null
    savedPosts?: StringNullableWithAggregatesFilter | string | null
    totalPosts?: IntWithAggregatesFilter | number
    totalViews?: IntWithAggregatesFilter | number
    totalLikes?: IntWithAggregatesFilter | number
    totalComments?: IntWithAggregatesFilter | number
    totalShares?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CommentWhereInput = {
    AND?: Enumerable<CommentWhereInput>
    OR?: Enumerable<CommentWhereInput>
    NOT?: Enumerable<CommentWhereInput>
    id?: StringFilter | string
    postId?: StringFilter | string
    userId?: StringFilter | string
    content?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    post?: XOR<KnorrPostRelationFilter, KnorrPostWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    post?: KnorrPostOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = {
    id?: string
  }

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CommentScalarWhereWithAggregatesInput>
    OR?: Enumerable<CommentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CommentScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    postId?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ShoppingListWhereInput = {
    AND?: Enumerable<ShoppingListWhereInput>
    OR?: Enumerable<ShoppingListWhereInput>
    NOT?: Enumerable<ShoppingListWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    items?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ShoppingListOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    items?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ShoppingListWhereUniqueInput = {
    id?: string
  }

  export type ShoppingListOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    items?: SortOrder
    _count?: ShoppingListCountOrderByAggregateInput
    _max?: ShoppingListMaxOrderByAggregateInput
    _min?: ShoppingListMinOrderByAggregateInput
  }

  export type ShoppingListScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShoppingListScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShoppingListScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShoppingListScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    items?: StringWithAggregatesFilter | string
  }

  export type FridgeItemWhereInput = {
    AND?: Enumerable<FridgeItemWhereInput>
    OR?: Enumerable<FridgeItemWhereInput>
    NOT?: Enumerable<FridgeItemWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    name?: StringFilter | string
    quantity?: IntFilter | number
    expiryDate?: DateTimeNullableFilter | Date | string | null
    zone?: StringNullableFilter | string | null
    category?: StringNullableFilter | string | null
    addedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type FridgeItemOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    expiryDate?: SortOrder
    zone?: SortOrder
    category?: SortOrder
    addedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FridgeItemWhereUniqueInput = {
    id?: string
  }

  export type FridgeItemOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    expiryDate?: SortOrder
    zone?: SortOrder
    category?: SortOrder
    addedAt?: SortOrder
    _count?: FridgeItemCountOrderByAggregateInput
    _avg?: FridgeItemAvgOrderByAggregateInput
    _max?: FridgeItemMaxOrderByAggregateInput
    _min?: FridgeItemMinOrderByAggregateInput
    _sum?: FridgeItemSumOrderByAggregateInput
  }

  export type FridgeItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FridgeItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<FridgeItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FridgeItemScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    quantity?: IntWithAggregatesFilter | number
    expiryDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    zone?: StringNullableWithAggregatesFilter | string | null
    category?: StringNullableWithAggregatesFilter | string | null
    addedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type StatWhereInput = {
    AND?: Enumerable<StatWhereInput>
    OR?: Enumerable<StatWhereInput>
    NOT?: Enumerable<StatWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    data?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type StatOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    data?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type StatWhereUniqueInput = {
    id?: string
  }

  export type StatOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    data?: SortOrder
    _count?: StatCountOrderByAggregateInput
    _max?: StatMaxOrderByAggregateInput
    _min?: StatMinOrderByAggregateInput
  }

  export type StatScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StatScalarWhereWithAggregatesInput>
    OR?: Enumerable<StatScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StatScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    data?: StringWithAggregatesFilter | string
  }

  export type KnorrRewardWhereInput = {
    AND?: Enumerable<KnorrRewardWhereInput>
    OR?: Enumerable<KnorrRewardWhereInput>
    NOT?: Enumerable<KnorrRewardWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    userId?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type KnorrRewardOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type KnorrRewardWhereUniqueInput = {
    id?: string
  }

  export type KnorrRewardOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    _count?: KnorrRewardCountOrderByAggregateInput
    _max?: KnorrRewardMaxOrderByAggregateInput
    _min?: KnorrRewardMinOrderByAggregateInput
  }

  export type KnorrRewardScalarWhereWithAggregatesInput = {
    AND?: Enumerable<KnorrRewardScalarWhereWithAggregatesInput>
    OR?: Enumerable<KnorrRewardScalarWhereWithAggregatesInput>
    NOT?: Enumerable<KnorrRewardScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
  }

  export type UserChallengeWhereInput = {
    AND?: Enumerable<UserChallengeWhereInput>
    OR?: Enumerable<UserChallengeWhereInput>
    NOT?: Enumerable<UserChallengeWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    challenge?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserChallengeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    challenge?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserChallengeWhereUniqueInput = {
    id?: string
  }

  export type UserChallengeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    challenge?: SortOrder
    _count?: UserChallengeCountOrderByAggregateInput
    _max?: UserChallengeMaxOrderByAggregateInput
    _min?: UserChallengeMinOrderByAggregateInput
  }

  export type UserChallengeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserChallengeScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserChallengeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserChallengeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    challenge?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostCreateNestedManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemCreateNestedManyWithoutUserInput
    stats?: StatCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardCreateNestedManyWithoutUserInput
    challenges?: UserChallengeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostUncheckedCreateNestedManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedCreateNestedManyWithoutUserInput
    stats?: StatUncheckedCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardUncheckedCreateNestedManyWithoutUserInput
    challenges?: UserChallengeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUpdateManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUpdateManyWithoutUserInput
    comments?: CommentUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUpdateManyWithoutUserInput
    stats?: StatUpdateManyWithoutUserInput
    rewards?: KnorrRewardUpdateManyWithoutUserInput
    challenges?: UserChallengeUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUncheckedUpdateManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUncheckedUpdateManyWithoutUserInput
    comments?: CommentUncheckedUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedUpdateManyWithoutUserInput
    stats?: StatUncheckedUpdateManyWithoutUserInput
    rewards?: KnorrRewardUncheckedUpdateManyWithoutUserInput
    challenges?: UserChallengeUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnorrPostCreateInput = {
    id?: string
    content?: string | null
    imageUrl?: string | null
    imageMimeType?: string | null
    hashtags?: string | null
    knorrProducts?: string | null
    isRecipe?: boolean
    prepTime?: string | null
    cookTime?: string | null
    servings?: string | null
    difficulty?: string | null
    views?: number
    likes?: number
    shares?: number
    comments?: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutKnorrPostsInput
    postComments?: CommentCreateNestedManyWithoutPostInput
  }

  export type KnorrPostUncheckedCreateInput = {
    id?: string
    userId: string
    content?: string | null
    imageUrl?: string | null
    imageMimeType?: string | null
    hashtags?: string | null
    knorrProducts?: string | null
    isRecipe?: boolean
    prepTime?: string | null
    cookTime?: string | null
    servings?: string | null
    difficulty?: string | null
    views?: number
    likes?: number
    shares?: number
    comments?: number
    createdAt?: Date | string
    postComments?: CommentUncheckedCreateNestedManyWithoutPostInput
  }

  export type KnorrPostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: NullableStringFieldUpdateOperationsInput | string | null
    knorrProducts?: NullableStringFieldUpdateOperationsInput | string | null
    isRecipe?: BoolFieldUpdateOperationsInput | boolean
    prepTime?: NullableStringFieldUpdateOperationsInput | string | null
    cookTime?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutKnorrPostsInput
    postComments?: CommentUpdateManyWithoutPostInput
  }

  export type KnorrPostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: NullableStringFieldUpdateOperationsInput | string | null
    knorrProducts?: NullableStringFieldUpdateOperationsInput | string | null
    isRecipe?: BoolFieldUpdateOperationsInput | boolean
    prepTime?: NullableStringFieldUpdateOperationsInput | string | null
    cookTime?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postComments?: CommentUncheckedUpdateManyWithoutPostInput
  }

  export type KnorrPostCreateManyInput = {
    id?: string
    userId: string
    content?: string | null
    imageUrl?: string | null
    imageMimeType?: string | null
    hashtags?: string | null
    knorrProducts?: string | null
    isRecipe?: boolean
    prepTime?: string | null
    cookTime?: string | null
    servings?: string | null
    difficulty?: string | null
    views?: number
    likes?: number
    shares?: number
    comments?: number
    createdAt?: Date | string
  }

  export type KnorrPostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: NullableStringFieldUpdateOperationsInput | string | null
    knorrProducts?: NullableStringFieldUpdateOperationsInput | string | null
    isRecipe?: BoolFieldUpdateOperationsInput | boolean
    prepTime?: NullableStringFieldUpdateOperationsInput | string | null
    cookTime?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnorrPostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: NullableStringFieldUpdateOperationsInput | string | null
    knorrProducts?: NullableStringFieldUpdateOperationsInput | string | null
    isRecipe?: BoolFieldUpdateOperationsInput | boolean
    prepTime?: NullableStringFieldUpdateOperationsInput | string | null
    cookTime?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnorrUserProfileCreateInput = {
    id?: string
    knorrLevel?: number
    knorrXP?: number
    rewardPoints?: number
    badges?: string | null
    followers?: string | null
    following?: string | null
    likedPosts?: string | null
    savedPosts?: string | null
    totalPosts?: number
    totalViews?: number
    totalLikes?: number
    totalComments?: number
    totalShares?: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutKnorrUserProfilesInput
  }

  export type KnorrUserProfileUncheckedCreateInput = {
    id?: string
    userId: string
    knorrLevel?: number
    knorrXP?: number
    rewardPoints?: number
    badges?: string | null
    followers?: string | null
    following?: string | null
    likedPosts?: string | null
    savedPosts?: string | null
    totalPosts?: number
    totalViews?: number
    totalLikes?: number
    totalComments?: number
    totalShares?: number
    createdAt?: Date | string
  }

  export type KnorrUserProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    knorrLevel?: IntFieldUpdateOperationsInput | number
    knorrXP?: IntFieldUpdateOperationsInput | number
    rewardPoints?: IntFieldUpdateOperationsInput | number
    badges?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: NullableStringFieldUpdateOperationsInput | string | null
    following?: NullableStringFieldUpdateOperationsInput | string | null
    likedPosts?: NullableStringFieldUpdateOperationsInput | string | null
    savedPosts?: NullableStringFieldUpdateOperationsInput | string | null
    totalPosts?: IntFieldUpdateOperationsInput | number
    totalViews?: IntFieldUpdateOperationsInput | number
    totalLikes?: IntFieldUpdateOperationsInput | number
    totalComments?: IntFieldUpdateOperationsInput | number
    totalShares?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutKnorrUserProfilesInput
  }

  export type KnorrUserProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    knorrLevel?: IntFieldUpdateOperationsInput | number
    knorrXP?: IntFieldUpdateOperationsInput | number
    rewardPoints?: IntFieldUpdateOperationsInput | number
    badges?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: NullableStringFieldUpdateOperationsInput | string | null
    following?: NullableStringFieldUpdateOperationsInput | string | null
    likedPosts?: NullableStringFieldUpdateOperationsInput | string | null
    savedPosts?: NullableStringFieldUpdateOperationsInput | string | null
    totalPosts?: IntFieldUpdateOperationsInput | number
    totalViews?: IntFieldUpdateOperationsInput | number
    totalLikes?: IntFieldUpdateOperationsInput | number
    totalComments?: IntFieldUpdateOperationsInput | number
    totalShares?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnorrUserProfileCreateManyInput = {
    id?: string
    userId: string
    knorrLevel?: number
    knorrXP?: number
    rewardPoints?: number
    badges?: string | null
    followers?: string | null
    following?: string | null
    likedPosts?: string | null
    savedPosts?: string | null
    totalPosts?: number
    totalViews?: number
    totalLikes?: number
    totalComments?: number
    totalShares?: number
    createdAt?: Date | string
  }

  export type KnorrUserProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    knorrLevel?: IntFieldUpdateOperationsInput | number
    knorrXP?: IntFieldUpdateOperationsInput | number
    rewardPoints?: IntFieldUpdateOperationsInput | number
    badges?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: NullableStringFieldUpdateOperationsInput | string | null
    following?: NullableStringFieldUpdateOperationsInput | string | null
    likedPosts?: NullableStringFieldUpdateOperationsInput | string | null
    savedPosts?: NullableStringFieldUpdateOperationsInput | string | null
    totalPosts?: IntFieldUpdateOperationsInput | number
    totalViews?: IntFieldUpdateOperationsInput | number
    totalLikes?: IntFieldUpdateOperationsInput | number
    totalComments?: IntFieldUpdateOperationsInput | number
    totalShares?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnorrUserProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    knorrLevel?: IntFieldUpdateOperationsInput | number
    knorrXP?: IntFieldUpdateOperationsInput | number
    rewardPoints?: IntFieldUpdateOperationsInput | number
    badges?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: NullableStringFieldUpdateOperationsInput | string | null
    following?: NullableStringFieldUpdateOperationsInput | string | null
    likedPosts?: NullableStringFieldUpdateOperationsInput | string | null
    savedPosts?: NullableStringFieldUpdateOperationsInput | string | null
    totalPosts?: IntFieldUpdateOperationsInput | number
    totalViews?: IntFieldUpdateOperationsInput | number
    totalLikes?: IntFieldUpdateOperationsInput | number
    totalComments?: IntFieldUpdateOperationsInput | number
    totalShares?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    post: KnorrPostCreateNestedOneWithoutPostCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    postId: string
    userId: string
    content: string
    createdAt?: Date | string
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: KnorrPostUpdateOneRequiredWithoutPostCommentsInput
    user?: UserUpdateOneRequiredWithoutCommentsInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyInput = {
    id?: string
    postId: string
    userId: string
    content: string
    createdAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingListCreateInput = {
    id?: string
    items: string
    user: UserCreateNestedOneWithoutShoppingListsInput
  }

  export type ShoppingListUncheckedCreateInput = {
    id?: string
    userId: string
    items: string
  }

  export type ShoppingListUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    items?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutShoppingListsInput
  }

  export type ShoppingListUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    items?: StringFieldUpdateOperationsInput | string
  }

  export type ShoppingListCreateManyInput = {
    id?: string
    userId: string
    items: string
  }

  export type ShoppingListUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    items?: StringFieldUpdateOperationsInput | string
  }

  export type ShoppingListUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    items?: StringFieldUpdateOperationsInput | string
  }

  export type FridgeItemCreateInput = {
    id?: string
    name: string
    quantity?: number
    expiryDate?: Date | string | null
    zone?: string | null
    category?: string | null
    addedAt?: Date | string
    user?: UserCreateNestedOneWithoutFridgeItemsInput
  }

  export type FridgeItemUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    quantity?: number
    expiryDate?: Date | string | null
    zone?: string | null
    category?: string | null
    addedAt?: Date | string
  }

  export type FridgeItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    zone?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutFridgeItemsInput
  }

  export type FridgeItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    zone?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FridgeItemCreateManyInput = {
    id?: string
    userId: string
    name: string
    quantity?: number
    expiryDate?: Date | string | null
    zone?: string | null
    category?: string | null
    addedAt?: Date | string
  }

  export type FridgeItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    zone?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FridgeItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    zone?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatCreateInput = {
    id?: string
    data: string
    user: UserCreateNestedOneWithoutStatsInput
  }

  export type StatUncheckedCreateInput = {
    id?: string
    userId: string
    data: string
  }

  export type StatUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutStatsInput
  }

  export type StatUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type StatCreateManyInput = {
    id?: string
    userId: string
    data: string
  }

  export type StatUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type StatUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type KnorrRewardCreateInput = {
    id?: string
    name: string
    user: UserCreateNestedOneWithoutRewardsInput
  }

  export type KnorrRewardUncheckedCreateInput = {
    id?: string
    name: string
    userId: string
  }

  export type KnorrRewardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutRewardsInput
  }

  export type KnorrRewardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type KnorrRewardCreateManyInput = {
    id?: string
    name: string
    userId: string
  }

  export type KnorrRewardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type KnorrRewardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserChallengeCreateInput = {
    id?: string
    challenge: string
    user: UserCreateNestedOneWithoutChallengesInput
  }

  export type UserChallengeUncheckedCreateInput = {
    id?: string
    userId: string
    challenge: string
  }

  export type UserChallengeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    challenge?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutChallengesInput
  }

  export type UserChallengeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    challenge?: StringFieldUpdateOperationsInput | string
  }

  export type UserChallengeCreateManyInput = {
    id?: string
    userId: string
    challenge: string
  }

  export type UserChallengeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    challenge?: StringFieldUpdateOperationsInput | string
  }

  export type UserChallengeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    challenge?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type KnorrPostListRelationFilter = {
    every?: KnorrPostWhereInput
    some?: KnorrPostWhereInput
    none?: KnorrPostWhereInput
  }

  export type KnorrUserProfileListRelationFilter = {
    every?: KnorrUserProfileWhereInput
    some?: KnorrUserProfileWhereInput
    none?: KnorrUserProfileWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type ShoppingListListRelationFilter = {
    every?: ShoppingListWhereInput
    some?: ShoppingListWhereInput
    none?: ShoppingListWhereInput
  }

  export type FridgeItemListRelationFilter = {
    every?: FridgeItemWhereInput
    some?: FridgeItemWhereInput
    none?: FridgeItemWhereInput
  }

  export type StatListRelationFilter = {
    every?: StatWhereInput
    some?: StatWhereInput
    none?: StatWhereInput
  }

  export type KnorrRewardListRelationFilter = {
    every?: KnorrRewardWhereInput
    some?: KnorrRewardWhereInput
    none?: KnorrRewardWhereInput
  }

  export type UserChallengeListRelationFilter = {
    every?: UserChallengeWhereInput
    some?: UserChallengeWhereInput
    none?: UserChallengeWhereInput
  }

  export type KnorrPostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KnorrUserProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShoppingListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FridgeItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KnorrRewardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserChallengeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    avatarUrl?: SortOrder
    country?: SortOrder
    dob?: SortOrder
    allergies?: SortOrder
    preferences?: SortOrder
    dietStyle?: SortOrder
    productsToAvoid?: SortOrder
    budget?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    budget?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    avatarUrl?: SortOrder
    country?: SortOrder
    dob?: SortOrder
    allergies?: SortOrder
    preferences?: SortOrder
    dietStyle?: SortOrder
    productsToAvoid?: SortOrder
    budget?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    avatarUrl?: SortOrder
    country?: SortOrder
    dob?: SortOrder
    allergies?: SortOrder
    preferences?: SortOrder
    dietStyle?: SortOrder
    productsToAvoid?: SortOrder
    budget?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    budget?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type KnorrPostCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    imageMimeType?: SortOrder
    hashtags?: SortOrder
    knorrProducts?: SortOrder
    isRecipe?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    difficulty?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    shares?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
  }

  export type KnorrPostAvgOrderByAggregateInput = {
    views?: SortOrder
    likes?: SortOrder
    shares?: SortOrder
    comments?: SortOrder
  }

  export type KnorrPostMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    imageMimeType?: SortOrder
    hashtags?: SortOrder
    knorrProducts?: SortOrder
    isRecipe?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    difficulty?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    shares?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
  }

  export type KnorrPostMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    imageMimeType?: SortOrder
    hashtags?: SortOrder
    knorrProducts?: SortOrder
    isRecipe?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    difficulty?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    shares?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
  }

  export type KnorrPostSumOrderByAggregateInput = {
    views?: SortOrder
    likes?: SortOrder
    shares?: SortOrder
    comments?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type KnorrUserProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    knorrLevel?: SortOrder
    knorrXP?: SortOrder
    rewardPoints?: SortOrder
    badges?: SortOrder
    followers?: SortOrder
    following?: SortOrder
    likedPosts?: SortOrder
    savedPosts?: SortOrder
    totalPosts?: SortOrder
    totalViews?: SortOrder
    totalLikes?: SortOrder
    totalComments?: SortOrder
    totalShares?: SortOrder
    createdAt?: SortOrder
  }

  export type KnorrUserProfileAvgOrderByAggregateInput = {
    knorrLevel?: SortOrder
    knorrXP?: SortOrder
    rewardPoints?: SortOrder
    totalPosts?: SortOrder
    totalViews?: SortOrder
    totalLikes?: SortOrder
    totalComments?: SortOrder
    totalShares?: SortOrder
  }

  export type KnorrUserProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    knorrLevel?: SortOrder
    knorrXP?: SortOrder
    rewardPoints?: SortOrder
    badges?: SortOrder
    followers?: SortOrder
    following?: SortOrder
    likedPosts?: SortOrder
    savedPosts?: SortOrder
    totalPosts?: SortOrder
    totalViews?: SortOrder
    totalLikes?: SortOrder
    totalComments?: SortOrder
    totalShares?: SortOrder
    createdAt?: SortOrder
  }

  export type KnorrUserProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    knorrLevel?: SortOrder
    knorrXP?: SortOrder
    rewardPoints?: SortOrder
    badges?: SortOrder
    followers?: SortOrder
    following?: SortOrder
    likedPosts?: SortOrder
    savedPosts?: SortOrder
    totalPosts?: SortOrder
    totalViews?: SortOrder
    totalLikes?: SortOrder
    totalComments?: SortOrder
    totalShares?: SortOrder
    createdAt?: SortOrder
  }

  export type KnorrUserProfileSumOrderByAggregateInput = {
    knorrLevel?: SortOrder
    knorrXP?: SortOrder
    rewardPoints?: SortOrder
    totalPosts?: SortOrder
    totalViews?: SortOrder
    totalLikes?: SortOrder
    totalComments?: SortOrder
    totalShares?: SortOrder
  }

  export type KnorrPostRelationFilter = {
    is?: KnorrPostWhereInput
    isNot?: KnorrPostWhereInput
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ShoppingListCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    items?: SortOrder
  }

  export type ShoppingListMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    items?: SortOrder
  }

  export type ShoppingListMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    items?: SortOrder
  }

  export type FridgeItemCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    expiryDate?: SortOrder
    zone?: SortOrder
    category?: SortOrder
    addedAt?: SortOrder
  }

  export type FridgeItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type FridgeItemMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    expiryDate?: SortOrder
    zone?: SortOrder
    category?: SortOrder
    addedAt?: SortOrder
  }

  export type FridgeItemMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    expiryDate?: SortOrder
    zone?: SortOrder
    category?: SortOrder
    addedAt?: SortOrder
  }

  export type FridgeItemSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type StatCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    data?: SortOrder
  }

  export type StatMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    data?: SortOrder
  }

  export type StatMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    data?: SortOrder
  }

  export type KnorrRewardCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type KnorrRewardMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type KnorrRewardMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type UserChallengeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    challenge?: SortOrder
  }

  export type UserChallengeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    challenge?: SortOrder
  }

  export type UserChallengeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    challenge?: SortOrder
  }

  export type KnorrPostCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<KnorrPostCreateWithoutUserInput>, Enumerable<KnorrPostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KnorrPostCreateOrConnectWithoutUserInput>
    createMany?: KnorrPostCreateManyUserInputEnvelope
    connect?: Enumerable<KnorrPostWhereUniqueInput>
  }

  export type KnorrUserProfileCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<KnorrUserProfileCreateWithoutUserInput>, Enumerable<KnorrUserProfileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KnorrUserProfileCreateOrConnectWithoutUserInput>
    createMany?: KnorrUserProfileCreateManyUserInputEnvelope
    connect?: Enumerable<KnorrUserProfileWhereUniqueInput>
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type ShoppingListCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ShoppingListCreateWithoutUserInput>, Enumerable<ShoppingListUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShoppingListCreateOrConnectWithoutUserInput>
    createMany?: ShoppingListCreateManyUserInputEnvelope
    connect?: Enumerable<ShoppingListWhereUniqueInput>
  }

  export type FridgeItemCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FridgeItemCreateWithoutUserInput>, Enumerable<FridgeItemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FridgeItemCreateOrConnectWithoutUserInput>
    createMany?: FridgeItemCreateManyUserInputEnvelope
    connect?: Enumerable<FridgeItemWhereUniqueInput>
  }

  export type StatCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<StatCreateWithoutUserInput>, Enumerable<StatUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StatCreateOrConnectWithoutUserInput>
    createMany?: StatCreateManyUserInputEnvelope
    connect?: Enumerable<StatWhereUniqueInput>
  }

  export type KnorrRewardCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<KnorrRewardCreateWithoutUserInput>, Enumerable<KnorrRewardUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KnorrRewardCreateOrConnectWithoutUserInput>
    createMany?: KnorrRewardCreateManyUserInputEnvelope
    connect?: Enumerable<KnorrRewardWhereUniqueInput>
  }

  export type UserChallengeCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserChallengeCreateWithoutUserInput>, Enumerable<UserChallengeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserChallengeCreateOrConnectWithoutUserInput>
    createMany?: UserChallengeCreateManyUserInputEnvelope
    connect?: Enumerable<UserChallengeWhereUniqueInput>
  }

  export type KnorrPostUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<KnorrPostCreateWithoutUserInput>, Enumerable<KnorrPostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KnorrPostCreateOrConnectWithoutUserInput>
    createMany?: KnorrPostCreateManyUserInputEnvelope
    connect?: Enumerable<KnorrPostWhereUniqueInput>
  }

  export type KnorrUserProfileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<KnorrUserProfileCreateWithoutUserInput>, Enumerable<KnorrUserProfileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KnorrUserProfileCreateOrConnectWithoutUserInput>
    createMany?: KnorrUserProfileCreateManyUserInputEnvelope
    connect?: Enumerable<KnorrUserProfileWhereUniqueInput>
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type ShoppingListUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ShoppingListCreateWithoutUserInput>, Enumerable<ShoppingListUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShoppingListCreateOrConnectWithoutUserInput>
    createMany?: ShoppingListCreateManyUserInputEnvelope
    connect?: Enumerable<ShoppingListWhereUniqueInput>
  }

  export type FridgeItemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FridgeItemCreateWithoutUserInput>, Enumerable<FridgeItemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FridgeItemCreateOrConnectWithoutUserInput>
    createMany?: FridgeItemCreateManyUserInputEnvelope
    connect?: Enumerable<FridgeItemWhereUniqueInput>
  }

  export type StatUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<StatCreateWithoutUserInput>, Enumerable<StatUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StatCreateOrConnectWithoutUserInput>
    createMany?: StatCreateManyUserInputEnvelope
    connect?: Enumerable<StatWhereUniqueInput>
  }

  export type KnorrRewardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<KnorrRewardCreateWithoutUserInput>, Enumerable<KnorrRewardUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KnorrRewardCreateOrConnectWithoutUserInput>
    createMany?: KnorrRewardCreateManyUserInputEnvelope
    connect?: Enumerable<KnorrRewardWhereUniqueInput>
  }

  export type UserChallengeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserChallengeCreateWithoutUserInput>, Enumerable<UserChallengeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserChallengeCreateOrConnectWithoutUserInput>
    createMany?: UserChallengeCreateManyUserInputEnvelope
    connect?: Enumerable<UserChallengeWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type KnorrPostUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<KnorrPostCreateWithoutUserInput>, Enumerable<KnorrPostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KnorrPostCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<KnorrPostUpsertWithWhereUniqueWithoutUserInput>
    createMany?: KnorrPostCreateManyUserInputEnvelope
    set?: Enumerable<KnorrPostWhereUniqueInput>
    disconnect?: Enumerable<KnorrPostWhereUniqueInput>
    delete?: Enumerable<KnorrPostWhereUniqueInput>
    connect?: Enumerable<KnorrPostWhereUniqueInput>
    update?: Enumerable<KnorrPostUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<KnorrPostUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<KnorrPostScalarWhereInput>
  }

  export type KnorrUserProfileUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<KnorrUserProfileCreateWithoutUserInput>, Enumerable<KnorrUserProfileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KnorrUserProfileCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<KnorrUserProfileUpsertWithWhereUniqueWithoutUserInput>
    createMany?: KnorrUserProfileCreateManyUserInputEnvelope
    set?: Enumerable<KnorrUserProfileWhereUniqueInput>
    disconnect?: Enumerable<KnorrUserProfileWhereUniqueInput>
    delete?: Enumerable<KnorrUserProfileWhereUniqueInput>
    connect?: Enumerable<KnorrUserProfileWhereUniqueInput>
    update?: Enumerable<KnorrUserProfileUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<KnorrUserProfileUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<KnorrUserProfileScalarWhereInput>
  }

  export type CommentUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type ShoppingListUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ShoppingListCreateWithoutUserInput>, Enumerable<ShoppingListUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShoppingListCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ShoppingListUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ShoppingListCreateManyUserInputEnvelope
    set?: Enumerable<ShoppingListWhereUniqueInput>
    disconnect?: Enumerable<ShoppingListWhereUniqueInput>
    delete?: Enumerable<ShoppingListWhereUniqueInput>
    connect?: Enumerable<ShoppingListWhereUniqueInput>
    update?: Enumerable<ShoppingListUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ShoppingListUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ShoppingListScalarWhereInput>
  }

  export type FridgeItemUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<FridgeItemCreateWithoutUserInput>, Enumerable<FridgeItemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FridgeItemCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FridgeItemUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FridgeItemCreateManyUserInputEnvelope
    set?: Enumerable<FridgeItemWhereUniqueInput>
    disconnect?: Enumerable<FridgeItemWhereUniqueInput>
    delete?: Enumerable<FridgeItemWhereUniqueInput>
    connect?: Enumerable<FridgeItemWhereUniqueInput>
    update?: Enumerable<FridgeItemUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FridgeItemUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FridgeItemScalarWhereInput>
  }

  export type StatUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<StatCreateWithoutUserInput>, Enumerable<StatUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StatCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<StatUpsertWithWhereUniqueWithoutUserInput>
    createMany?: StatCreateManyUserInputEnvelope
    set?: Enumerable<StatWhereUniqueInput>
    disconnect?: Enumerable<StatWhereUniqueInput>
    delete?: Enumerable<StatWhereUniqueInput>
    connect?: Enumerable<StatWhereUniqueInput>
    update?: Enumerable<StatUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<StatUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<StatScalarWhereInput>
  }

  export type KnorrRewardUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<KnorrRewardCreateWithoutUserInput>, Enumerable<KnorrRewardUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KnorrRewardCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<KnorrRewardUpsertWithWhereUniqueWithoutUserInput>
    createMany?: KnorrRewardCreateManyUserInputEnvelope
    set?: Enumerable<KnorrRewardWhereUniqueInput>
    disconnect?: Enumerable<KnorrRewardWhereUniqueInput>
    delete?: Enumerable<KnorrRewardWhereUniqueInput>
    connect?: Enumerable<KnorrRewardWhereUniqueInput>
    update?: Enumerable<KnorrRewardUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<KnorrRewardUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<KnorrRewardScalarWhereInput>
  }

  export type UserChallengeUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserChallengeCreateWithoutUserInput>, Enumerable<UserChallengeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserChallengeCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserChallengeUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserChallengeCreateManyUserInputEnvelope
    set?: Enumerable<UserChallengeWhereUniqueInput>
    disconnect?: Enumerable<UserChallengeWhereUniqueInput>
    delete?: Enumerable<UserChallengeWhereUniqueInput>
    connect?: Enumerable<UserChallengeWhereUniqueInput>
    update?: Enumerable<UserChallengeUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserChallengeUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserChallengeScalarWhereInput>
  }

  export type KnorrPostUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<KnorrPostCreateWithoutUserInput>, Enumerable<KnorrPostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KnorrPostCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<KnorrPostUpsertWithWhereUniqueWithoutUserInput>
    createMany?: KnorrPostCreateManyUserInputEnvelope
    set?: Enumerable<KnorrPostWhereUniqueInput>
    disconnect?: Enumerable<KnorrPostWhereUniqueInput>
    delete?: Enumerable<KnorrPostWhereUniqueInput>
    connect?: Enumerable<KnorrPostWhereUniqueInput>
    update?: Enumerable<KnorrPostUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<KnorrPostUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<KnorrPostScalarWhereInput>
  }

  export type KnorrUserProfileUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<KnorrUserProfileCreateWithoutUserInput>, Enumerable<KnorrUserProfileUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KnorrUserProfileCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<KnorrUserProfileUpsertWithWhereUniqueWithoutUserInput>
    createMany?: KnorrUserProfileCreateManyUserInputEnvelope
    set?: Enumerable<KnorrUserProfileWhereUniqueInput>
    disconnect?: Enumerable<KnorrUserProfileWhereUniqueInput>
    delete?: Enumerable<KnorrUserProfileWhereUniqueInput>
    connect?: Enumerable<KnorrUserProfileWhereUniqueInput>
    update?: Enumerable<KnorrUserProfileUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<KnorrUserProfileUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<KnorrUserProfileScalarWhereInput>
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type ShoppingListUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ShoppingListCreateWithoutUserInput>, Enumerable<ShoppingListUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShoppingListCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ShoppingListUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ShoppingListCreateManyUserInputEnvelope
    set?: Enumerable<ShoppingListWhereUniqueInput>
    disconnect?: Enumerable<ShoppingListWhereUniqueInput>
    delete?: Enumerable<ShoppingListWhereUniqueInput>
    connect?: Enumerable<ShoppingListWhereUniqueInput>
    update?: Enumerable<ShoppingListUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ShoppingListUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ShoppingListScalarWhereInput>
  }

  export type FridgeItemUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<FridgeItemCreateWithoutUserInput>, Enumerable<FridgeItemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FridgeItemCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FridgeItemUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FridgeItemCreateManyUserInputEnvelope
    set?: Enumerable<FridgeItemWhereUniqueInput>
    disconnect?: Enumerable<FridgeItemWhereUniqueInput>
    delete?: Enumerable<FridgeItemWhereUniqueInput>
    connect?: Enumerable<FridgeItemWhereUniqueInput>
    update?: Enumerable<FridgeItemUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FridgeItemUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FridgeItemScalarWhereInput>
  }

  export type StatUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<StatCreateWithoutUserInput>, Enumerable<StatUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StatCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<StatUpsertWithWhereUniqueWithoutUserInput>
    createMany?: StatCreateManyUserInputEnvelope
    set?: Enumerable<StatWhereUniqueInput>
    disconnect?: Enumerable<StatWhereUniqueInput>
    delete?: Enumerable<StatWhereUniqueInput>
    connect?: Enumerable<StatWhereUniqueInput>
    update?: Enumerable<StatUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<StatUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<StatScalarWhereInput>
  }

  export type KnorrRewardUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<KnorrRewardCreateWithoutUserInput>, Enumerable<KnorrRewardUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KnorrRewardCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<KnorrRewardUpsertWithWhereUniqueWithoutUserInput>
    createMany?: KnorrRewardCreateManyUserInputEnvelope
    set?: Enumerable<KnorrRewardWhereUniqueInput>
    disconnect?: Enumerable<KnorrRewardWhereUniqueInput>
    delete?: Enumerable<KnorrRewardWhereUniqueInput>
    connect?: Enumerable<KnorrRewardWhereUniqueInput>
    update?: Enumerable<KnorrRewardUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<KnorrRewardUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<KnorrRewardScalarWhereInput>
  }

  export type UserChallengeUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserChallengeCreateWithoutUserInput>, Enumerable<UserChallengeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserChallengeCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserChallengeUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserChallengeCreateManyUserInputEnvelope
    set?: Enumerable<UserChallengeWhereUniqueInput>
    disconnect?: Enumerable<UserChallengeWhereUniqueInput>
    delete?: Enumerable<UserChallengeWhereUniqueInput>
    connect?: Enumerable<UserChallengeWhereUniqueInput>
    update?: Enumerable<UserChallengeUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserChallengeUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserChallengeScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutKnorrPostsInput = {
    create?: XOR<UserCreateWithoutKnorrPostsInput, UserUncheckedCreateWithoutKnorrPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutKnorrPostsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type CommentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutKnorrPostsInput = {
    create?: XOR<UserCreateWithoutKnorrPostsInput, UserUncheckedCreateWithoutKnorrPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutKnorrPostsInput
    upsert?: UserUpsertWithoutKnorrPostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutKnorrPostsInput, UserUncheckedUpdateWithoutKnorrPostsInput>
  }

  export type CommentUpdateManyWithoutPostInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutPostInput>
    createMany?: CommentCreateManyPostInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type CommentUncheckedUpdateManyWithoutPostInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutPostInput>
    createMany?: CommentCreateManyPostInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutKnorrUserProfilesInput = {
    create?: XOR<UserCreateWithoutKnorrUserProfilesInput, UserUncheckedCreateWithoutKnorrUserProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutKnorrUserProfilesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutKnorrUserProfilesInput = {
    create?: XOR<UserCreateWithoutKnorrUserProfilesInput, UserUncheckedCreateWithoutKnorrUserProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutKnorrUserProfilesInput
    upsert?: UserUpsertWithoutKnorrUserProfilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutKnorrUserProfilesInput, UserUncheckedUpdateWithoutKnorrUserProfilesInput>
  }

  export type KnorrPostCreateNestedOneWithoutPostCommentsInput = {
    create?: XOR<KnorrPostCreateWithoutPostCommentsInput, KnorrPostUncheckedCreateWithoutPostCommentsInput>
    connectOrCreate?: KnorrPostCreateOrConnectWithoutPostCommentsInput
    connect?: KnorrPostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type KnorrPostUpdateOneRequiredWithoutPostCommentsInput = {
    create?: XOR<KnorrPostCreateWithoutPostCommentsInput, KnorrPostUncheckedCreateWithoutPostCommentsInput>
    connectOrCreate?: KnorrPostCreateOrConnectWithoutPostCommentsInput
    upsert?: KnorrPostUpsertWithoutPostCommentsInput
    connect?: KnorrPostWhereUniqueInput
    update?: XOR<KnorrPostUpdateWithoutPostCommentsInput, KnorrPostUncheckedUpdateWithoutPostCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserCreateNestedOneWithoutShoppingListsInput = {
    create?: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShoppingListsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutShoppingListsInput = {
    create?: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShoppingListsInput
    upsert?: UserUpsertWithoutShoppingListsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutShoppingListsInput, UserUncheckedUpdateWithoutShoppingListsInput>
  }

  export type UserCreateNestedOneWithoutFridgeItemsInput = {
    create?: XOR<UserCreateWithoutFridgeItemsInput, UserUncheckedCreateWithoutFridgeItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFridgeItemsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutFridgeItemsInput = {
    create?: XOR<UserCreateWithoutFridgeItemsInput, UserUncheckedCreateWithoutFridgeItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFridgeItemsInput
    upsert?: UserUpsertWithoutFridgeItemsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFridgeItemsInput, UserUncheckedUpdateWithoutFridgeItemsInput>
  }

  export type UserCreateNestedOneWithoutStatsInput = {
    create?: XOR<UserCreateWithoutStatsInput, UserUncheckedCreateWithoutStatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStatsInput = {
    create?: XOR<UserCreateWithoutStatsInput, UserUncheckedCreateWithoutStatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatsInput
    upsert?: UserUpsertWithoutStatsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutStatsInput, UserUncheckedUpdateWithoutStatsInput>
  }

  export type UserCreateNestedOneWithoutRewardsInput = {
    create?: XOR<UserCreateWithoutRewardsInput, UserUncheckedCreateWithoutRewardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRewardsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRewardsInput = {
    create?: XOR<UserCreateWithoutRewardsInput, UserUncheckedCreateWithoutRewardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRewardsInput
    upsert?: UserUpsertWithoutRewardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRewardsInput, UserUncheckedUpdateWithoutRewardsInput>
  }

  export type UserCreateNestedOneWithoutChallengesInput = {
    create?: XOR<UserCreateWithoutChallengesInput, UserUncheckedCreateWithoutChallengesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChallengesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutChallengesInput = {
    create?: XOR<UserCreateWithoutChallengesInput, UserUncheckedCreateWithoutChallengesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChallengesInput
    upsert?: UserUpsertWithoutChallengesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutChallengesInput, UserUncheckedUpdateWithoutChallengesInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type KnorrPostCreateWithoutUserInput = {
    id?: string
    content?: string | null
    imageUrl?: string | null
    imageMimeType?: string | null
    hashtags?: string | null
    knorrProducts?: string | null
    isRecipe?: boolean
    prepTime?: string | null
    cookTime?: string | null
    servings?: string | null
    difficulty?: string | null
    views?: number
    likes?: number
    shares?: number
    comments?: number
    createdAt?: Date | string
    postComments?: CommentCreateNestedManyWithoutPostInput
  }

  export type KnorrPostUncheckedCreateWithoutUserInput = {
    id?: string
    content?: string | null
    imageUrl?: string | null
    imageMimeType?: string | null
    hashtags?: string | null
    knorrProducts?: string | null
    isRecipe?: boolean
    prepTime?: string | null
    cookTime?: string | null
    servings?: string | null
    difficulty?: string | null
    views?: number
    likes?: number
    shares?: number
    comments?: number
    createdAt?: Date | string
    postComments?: CommentUncheckedCreateNestedManyWithoutPostInput
  }

  export type KnorrPostCreateOrConnectWithoutUserInput = {
    where: KnorrPostWhereUniqueInput
    create: XOR<KnorrPostCreateWithoutUserInput, KnorrPostUncheckedCreateWithoutUserInput>
  }

  export type KnorrPostCreateManyUserInputEnvelope = {
    data: Enumerable<KnorrPostCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type KnorrUserProfileCreateWithoutUserInput = {
    id?: string
    knorrLevel?: number
    knorrXP?: number
    rewardPoints?: number
    badges?: string | null
    followers?: string | null
    following?: string | null
    likedPosts?: string | null
    savedPosts?: string | null
    totalPosts?: number
    totalViews?: number
    totalLikes?: number
    totalComments?: number
    totalShares?: number
    createdAt?: Date | string
  }

  export type KnorrUserProfileUncheckedCreateWithoutUserInput = {
    id?: string
    knorrLevel?: number
    knorrXP?: number
    rewardPoints?: number
    badges?: string | null
    followers?: string | null
    following?: string | null
    likedPosts?: string | null
    savedPosts?: string | null
    totalPosts?: number
    totalViews?: number
    totalLikes?: number
    totalComments?: number
    totalShares?: number
    createdAt?: Date | string
  }

  export type KnorrUserProfileCreateOrConnectWithoutUserInput = {
    where: KnorrUserProfileWhereUniqueInput
    create: XOR<KnorrUserProfileCreateWithoutUserInput, KnorrUserProfileUncheckedCreateWithoutUserInput>
  }

  export type KnorrUserProfileCreateManyUserInputEnvelope = {
    data: Enumerable<KnorrUserProfileCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    post: KnorrPostCreateNestedOneWithoutPostCommentsInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: string
    postId: string
    content: string
    createdAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: Enumerable<CommentCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ShoppingListCreateWithoutUserInput = {
    id?: string
    items: string
  }

  export type ShoppingListUncheckedCreateWithoutUserInput = {
    id?: string
    items: string
  }

  export type ShoppingListCreateOrConnectWithoutUserInput = {
    where: ShoppingListWhereUniqueInput
    create: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput>
  }

  export type ShoppingListCreateManyUserInputEnvelope = {
    data: Enumerable<ShoppingListCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type FridgeItemCreateWithoutUserInput = {
    id?: string
    name: string
    quantity?: number
    expiryDate?: Date | string | null
    zone?: string | null
    category?: string | null
    addedAt?: Date | string
  }

  export type FridgeItemUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    quantity?: number
    expiryDate?: Date | string | null
    zone?: string | null
    category?: string | null
    addedAt?: Date | string
  }

  export type FridgeItemCreateOrConnectWithoutUserInput = {
    where: FridgeItemWhereUniqueInput
    create: XOR<FridgeItemCreateWithoutUserInput, FridgeItemUncheckedCreateWithoutUserInput>
  }

  export type FridgeItemCreateManyUserInputEnvelope = {
    data: Enumerable<FridgeItemCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type StatCreateWithoutUserInput = {
    id?: string
    data: string
  }

  export type StatUncheckedCreateWithoutUserInput = {
    id?: string
    data: string
  }

  export type StatCreateOrConnectWithoutUserInput = {
    where: StatWhereUniqueInput
    create: XOR<StatCreateWithoutUserInput, StatUncheckedCreateWithoutUserInput>
  }

  export type StatCreateManyUserInputEnvelope = {
    data: Enumerable<StatCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type KnorrRewardCreateWithoutUserInput = {
    id?: string
    name: string
  }

  export type KnorrRewardUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
  }

  export type KnorrRewardCreateOrConnectWithoutUserInput = {
    where: KnorrRewardWhereUniqueInput
    create: XOR<KnorrRewardCreateWithoutUserInput, KnorrRewardUncheckedCreateWithoutUserInput>
  }

  export type KnorrRewardCreateManyUserInputEnvelope = {
    data: Enumerable<KnorrRewardCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserChallengeCreateWithoutUserInput = {
    id?: string
    challenge: string
  }

  export type UserChallengeUncheckedCreateWithoutUserInput = {
    id?: string
    challenge: string
  }

  export type UserChallengeCreateOrConnectWithoutUserInput = {
    where: UserChallengeWhereUniqueInput
    create: XOR<UserChallengeCreateWithoutUserInput, UserChallengeUncheckedCreateWithoutUserInput>
  }

  export type UserChallengeCreateManyUserInputEnvelope = {
    data: Enumerable<UserChallengeCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type KnorrPostUpsertWithWhereUniqueWithoutUserInput = {
    where: KnorrPostWhereUniqueInput
    update: XOR<KnorrPostUpdateWithoutUserInput, KnorrPostUncheckedUpdateWithoutUserInput>
    create: XOR<KnorrPostCreateWithoutUserInput, KnorrPostUncheckedCreateWithoutUserInput>
  }

  export type KnorrPostUpdateWithWhereUniqueWithoutUserInput = {
    where: KnorrPostWhereUniqueInput
    data: XOR<KnorrPostUpdateWithoutUserInput, KnorrPostUncheckedUpdateWithoutUserInput>
  }

  export type KnorrPostUpdateManyWithWhereWithoutUserInput = {
    where: KnorrPostScalarWhereInput
    data: XOR<KnorrPostUpdateManyMutationInput, KnorrPostUncheckedUpdateManyWithoutKnorrPostsInput>
  }

  export type KnorrPostScalarWhereInput = {
    AND?: Enumerable<KnorrPostScalarWhereInput>
    OR?: Enumerable<KnorrPostScalarWhereInput>
    NOT?: Enumerable<KnorrPostScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    content?: StringNullableFilter | string | null
    imageUrl?: StringNullableFilter | string | null
    imageMimeType?: StringNullableFilter | string | null
    hashtags?: StringNullableFilter | string | null
    knorrProducts?: StringNullableFilter | string | null
    isRecipe?: BoolFilter | boolean
    prepTime?: StringNullableFilter | string | null
    cookTime?: StringNullableFilter | string | null
    servings?: StringNullableFilter | string | null
    difficulty?: StringNullableFilter | string | null
    views?: IntFilter | number
    likes?: IntFilter | number
    shares?: IntFilter | number
    comments?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
  }

  export type KnorrUserProfileUpsertWithWhereUniqueWithoutUserInput = {
    where: KnorrUserProfileWhereUniqueInput
    update: XOR<KnorrUserProfileUpdateWithoutUserInput, KnorrUserProfileUncheckedUpdateWithoutUserInput>
    create: XOR<KnorrUserProfileCreateWithoutUserInput, KnorrUserProfileUncheckedCreateWithoutUserInput>
  }

  export type KnorrUserProfileUpdateWithWhereUniqueWithoutUserInput = {
    where: KnorrUserProfileWhereUniqueInput
    data: XOR<KnorrUserProfileUpdateWithoutUserInput, KnorrUserProfileUncheckedUpdateWithoutUserInput>
  }

  export type KnorrUserProfileUpdateManyWithWhereWithoutUserInput = {
    where: KnorrUserProfileScalarWhereInput
    data: XOR<KnorrUserProfileUpdateManyMutationInput, KnorrUserProfileUncheckedUpdateManyWithoutKnorrUserProfilesInput>
  }

  export type KnorrUserProfileScalarWhereInput = {
    AND?: Enumerable<KnorrUserProfileScalarWhereInput>
    OR?: Enumerable<KnorrUserProfileScalarWhereInput>
    NOT?: Enumerable<KnorrUserProfileScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    knorrLevel?: IntFilter | number
    knorrXP?: IntFilter | number
    rewardPoints?: IntFilter | number
    badges?: StringNullableFilter | string | null
    followers?: StringNullableFilter | string | null
    following?: StringNullableFilter | string | null
    likedPosts?: StringNullableFilter | string | null
    savedPosts?: StringNullableFilter | string | null
    totalPosts?: IntFilter | number
    totalViews?: IntFilter | number
    totalLikes?: IntFilter | number
    totalComments?: IntFilter | number
    totalShares?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCommentsInput>
  }

  export type CommentScalarWhereInput = {
    AND?: Enumerable<CommentScalarWhereInput>
    OR?: Enumerable<CommentScalarWhereInput>
    NOT?: Enumerable<CommentScalarWhereInput>
    id?: StringFilter | string
    postId?: StringFilter | string
    userId?: StringFilter | string
    content?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type ShoppingListUpsertWithWhereUniqueWithoutUserInput = {
    where: ShoppingListWhereUniqueInput
    update: XOR<ShoppingListUpdateWithoutUserInput, ShoppingListUncheckedUpdateWithoutUserInput>
    create: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput>
  }

  export type ShoppingListUpdateWithWhereUniqueWithoutUserInput = {
    where: ShoppingListWhereUniqueInput
    data: XOR<ShoppingListUpdateWithoutUserInput, ShoppingListUncheckedUpdateWithoutUserInput>
  }

  export type ShoppingListUpdateManyWithWhereWithoutUserInput = {
    where: ShoppingListScalarWhereInput
    data: XOR<ShoppingListUpdateManyMutationInput, ShoppingListUncheckedUpdateManyWithoutShoppingListsInput>
  }

  export type ShoppingListScalarWhereInput = {
    AND?: Enumerable<ShoppingListScalarWhereInput>
    OR?: Enumerable<ShoppingListScalarWhereInput>
    NOT?: Enumerable<ShoppingListScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    items?: StringFilter | string
  }

  export type FridgeItemUpsertWithWhereUniqueWithoutUserInput = {
    where: FridgeItemWhereUniqueInput
    update: XOR<FridgeItemUpdateWithoutUserInput, FridgeItemUncheckedUpdateWithoutUserInput>
    create: XOR<FridgeItemCreateWithoutUserInput, FridgeItemUncheckedCreateWithoutUserInput>
  }

  export type FridgeItemUpdateWithWhereUniqueWithoutUserInput = {
    where: FridgeItemWhereUniqueInput
    data: XOR<FridgeItemUpdateWithoutUserInput, FridgeItemUncheckedUpdateWithoutUserInput>
  }

  export type FridgeItemUpdateManyWithWhereWithoutUserInput = {
    where: FridgeItemScalarWhereInput
    data: XOR<FridgeItemUpdateManyMutationInput, FridgeItemUncheckedUpdateManyWithoutFridgeItemsInput>
  }

  export type FridgeItemScalarWhereInput = {
    AND?: Enumerable<FridgeItemScalarWhereInput>
    OR?: Enumerable<FridgeItemScalarWhereInput>
    NOT?: Enumerable<FridgeItemScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    name?: StringFilter | string
    quantity?: IntFilter | number
    expiryDate?: DateTimeNullableFilter | Date | string | null
    zone?: StringNullableFilter | string | null
    category?: StringNullableFilter | string | null
    addedAt?: DateTimeFilter | Date | string
  }

  export type StatUpsertWithWhereUniqueWithoutUserInput = {
    where: StatWhereUniqueInput
    update: XOR<StatUpdateWithoutUserInput, StatUncheckedUpdateWithoutUserInput>
    create: XOR<StatCreateWithoutUserInput, StatUncheckedCreateWithoutUserInput>
  }

  export type StatUpdateWithWhereUniqueWithoutUserInput = {
    where: StatWhereUniqueInput
    data: XOR<StatUpdateWithoutUserInput, StatUncheckedUpdateWithoutUserInput>
  }

  export type StatUpdateManyWithWhereWithoutUserInput = {
    where: StatScalarWhereInput
    data: XOR<StatUpdateManyMutationInput, StatUncheckedUpdateManyWithoutStatsInput>
  }

  export type StatScalarWhereInput = {
    AND?: Enumerable<StatScalarWhereInput>
    OR?: Enumerable<StatScalarWhereInput>
    NOT?: Enumerable<StatScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    data?: StringFilter | string
  }

  export type KnorrRewardUpsertWithWhereUniqueWithoutUserInput = {
    where: KnorrRewardWhereUniqueInput
    update: XOR<KnorrRewardUpdateWithoutUserInput, KnorrRewardUncheckedUpdateWithoutUserInput>
    create: XOR<KnorrRewardCreateWithoutUserInput, KnorrRewardUncheckedCreateWithoutUserInput>
  }

  export type KnorrRewardUpdateWithWhereUniqueWithoutUserInput = {
    where: KnorrRewardWhereUniqueInput
    data: XOR<KnorrRewardUpdateWithoutUserInput, KnorrRewardUncheckedUpdateWithoutUserInput>
  }

  export type KnorrRewardUpdateManyWithWhereWithoutUserInput = {
    where: KnorrRewardScalarWhereInput
    data: XOR<KnorrRewardUpdateManyMutationInput, KnorrRewardUncheckedUpdateManyWithoutRewardsInput>
  }

  export type KnorrRewardScalarWhereInput = {
    AND?: Enumerable<KnorrRewardScalarWhereInput>
    OR?: Enumerable<KnorrRewardScalarWhereInput>
    NOT?: Enumerable<KnorrRewardScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    userId?: StringFilter | string
  }

  export type UserChallengeUpsertWithWhereUniqueWithoutUserInput = {
    where: UserChallengeWhereUniqueInput
    update: XOR<UserChallengeUpdateWithoutUserInput, UserChallengeUncheckedUpdateWithoutUserInput>
    create: XOR<UserChallengeCreateWithoutUserInput, UserChallengeUncheckedCreateWithoutUserInput>
  }

  export type UserChallengeUpdateWithWhereUniqueWithoutUserInput = {
    where: UserChallengeWhereUniqueInput
    data: XOR<UserChallengeUpdateWithoutUserInput, UserChallengeUncheckedUpdateWithoutUserInput>
  }

  export type UserChallengeUpdateManyWithWhereWithoutUserInput = {
    where: UserChallengeScalarWhereInput
    data: XOR<UserChallengeUpdateManyMutationInput, UserChallengeUncheckedUpdateManyWithoutChallengesInput>
  }

  export type UserChallengeScalarWhereInput = {
    AND?: Enumerable<UserChallengeScalarWhereInput>
    OR?: Enumerable<UserChallengeScalarWhereInput>
    NOT?: Enumerable<UserChallengeScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    challenge?: StringFilter | string
  }

  export type UserCreateWithoutKnorrPostsInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrUserProfiles?: KnorrUserProfileCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemCreateNestedManyWithoutUserInput
    stats?: StatCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardCreateNestedManyWithoutUserInput
    challenges?: UserChallengeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutKnorrPostsInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrUserProfiles?: KnorrUserProfileUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedCreateNestedManyWithoutUserInput
    stats?: StatUncheckedCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardUncheckedCreateNestedManyWithoutUserInput
    challenges?: UserChallengeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutKnorrPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutKnorrPostsInput, UserUncheckedCreateWithoutKnorrPostsInput>
  }

  export type CommentCreateWithoutPostInput = {
    id?: string
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutPostInput = {
    id?: string
    userId: string
    content: string
    createdAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutPostInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentCreateManyPostInputEnvelope = {
    data: Enumerable<CommentCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutKnorrPostsInput = {
    update: XOR<UserUpdateWithoutKnorrPostsInput, UserUncheckedUpdateWithoutKnorrPostsInput>
    create: XOR<UserCreateWithoutKnorrPostsInput, UserUncheckedCreateWithoutKnorrPostsInput>
  }

  export type UserUpdateWithoutKnorrPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrUserProfiles?: KnorrUserProfileUpdateManyWithoutUserInput
    comments?: CommentUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUpdateManyWithoutUserInput
    stats?: StatUpdateManyWithoutUserInput
    rewards?: KnorrRewardUpdateManyWithoutUserInput
    challenges?: UserChallengeUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutKnorrPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrUserProfiles?: KnorrUserProfileUncheckedUpdateManyWithoutUserInput
    comments?: CommentUncheckedUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedUpdateManyWithoutUserInput
    stats?: StatUncheckedUpdateManyWithoutUserInput
    rewards?: KnorrRewardUncheckedUpdateManyWithoutUserInput
    challenges?: UserChallengeUncheckedUpdateManyWithoutUserInput
  }

  export type CommentUpsertWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
  }

  export type CommentUpdateManyWithWhereWithoutPostInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutPostCommentsInput>
  }

  export type UserCreateWithoutKnorrUserProfilesInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemCreateNestedManyWithoutUserInput
    stats?: StatCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardCreateNestedManyWithoutUserInput
    challenges?: UserChallengeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutKnorrUserProfilesInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedCreateNestedManyWithoutUserInput
    stats?: StatUncheckedCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardUncheckedCreateNestedManyWithoutUserInput
    challenges?: UserChallengeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutKnorrUserProfilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutKnorrUserProfilesInput, UserUncheckedCreateWithoutKnorrUserProfilesInput>
  }

  export type UserUpsertWithoutKnorrUserProfilesInput = {
    update: XOR<UserUpdateWithoutKnorrUserProfilesInput, UserUncheckedUpdateWithoutKnorrUserProfilesInput>
    create: XOR<UserCreateWithoutKnorrUserProfilesInput, UserUncheckedCreateWithoutKnorrUserProfilesInput>
  }

  export type UserUpdateWithoutKnorrUserProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUpdateManyWithoutUserInput
    comments?: CommentUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUpdateManyWithoutUserInput
    stats?: StatUpdateManyWithoutUserInput
    rewards?: KnorrRewardUpdateManyWithoutUserInput
    challenges?: UserChallengeUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutKnorrUserProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUncheckedUpdateManyWithoutUserInput
    comments?: CommentUncheckedUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedUpdateManyWithoutUserInput
    stats?: StatUncheckedUpdateManyWithoutUserInput
    rewards?: KnorrRewardUncheckedUpdateManyWithoutUserInput
    challenges?: UserChallengeUncheckedUpdateManyWithoutUserInput
  }

  export type KnorrPostCreateWithoutPostCommentsInput = {
    id?: string
    content?: string | null
    imageUrl?: string | null
    imageMimeType?: string | null
    hashtags?: string | null
    knorrProducts?: string | null
    isRecipe?: boolean
    prepTime?: string | null
    cookTime?: string | null
    servings?: string | null
    difficulty?: string | null
    views?: number
    likes?: number
    shares?: number
    comments?: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutKnorrPostsInput
  }

  export type KnorrPostUncheckedCreateWithoutPostCommentsInput = {
    id?: string
    userId: string
    content?: string | null
    imageUrl?: string | null
    imageMimeType?: string | null
    hashtags?: string | null
    knorrProducts?: string | null
    isRecipe?: boolean
    prepTime?: string | null
    cookTime?: string | null
    servings?: string | null
    difficulty?: string | null
    views?: number
    likes?: number
    shares?: number
    comments?: number
    createdAt?: Date | string
  }

  export type KnorrPostCreateOrConnectWithoutPostCommentsInput = {
    where: KnorrPostWhereUniqueInput
    create: XOR<KnorrPostCreateWithoutPostCommentsInput, KnorrPostUncheckedCreateWithoutPostCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostCreateNestedManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemCreateNestedManyWithoutUserInput
    stats?: StatCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardCreateNestedManyWithoutUserInput
    challenges?: UserChallengeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostUncheckedCreateNestedManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedCreateNestedManyWithoutUserInput
    stats?: StatUncheckedCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardUncheckedCreateNestedManyWithoutUserInput
    challenges?: UserChallengeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type KnorrPostUpsertWithoutPostCommentsInput = {
    update: XOR<KnorrPostUpdateWithoutPostCommentsInput, KnorrPostUncheckedUpdateWithoutPostCommentsInput>
    create: XOR<KnorrPostCreateWithoutPostCommentsInput, KnorrPostUncheckedCreateWithoutPostCommentsInput>
  }

  export type KnorrPostUpdateWithoutPostCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: NullableStringFieldUpdateOperationsInput | string | null
    knorrProducts?: NullableStringFieldUpdateOperationsInput | string | null
    isRecipe?: BoolFieldUpdateOperationsInput | boolean
    prepTime?: NullableStringFieldUpdateOperationsInput | string | null
    cookTime?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutKnorrPostsInput
  }

  export type KnorrPostUncheckedUpdateWithoutPostCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: NullableStringFieldUpdateOperationsInput | string | null
    knorrProducts?: NullableStringFieldUpdateOperationsInput | string | null
    isRecipe?: BoolFieldUpdateOperationsInput | boolean
    prepTime?: NullableStringFieldUpdateOperationsInput | string | null
    cookTime?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUpdateManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUpdateManyWithoutUserInput
    stats?: StatUpdateManyWithoutUserInput
    rewards?: KnorrRewardUpdateManyWithoutUserInput
    challenges?: UserChallengeUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUncheckedUpdateManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUncheckedUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedUpdateManyWithoutUserInput
    stats?: StatUncheckedUpdateManyWithoutUserInput
    rewards?: KnorrRewardUncheckedUpdateManyWithoutUserInput
    challenges?: UserChallengeUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutShoppingListsInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostCreateNestedManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemCreateNestedManyWithoutUserInput
    stats?: StatCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardCreateNestedManyWithoutUserInput
    challenges?: UserChallengeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutShoppingListsInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostUncheckedCreateNestedManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedCreateNestedManyWithoutUserInput
    stats?: StatUncheckedCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardUncheckedCreateNestedManyWithoutUserInput
    challenges?: UserChallengeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutShoppingListsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
  }

  export type UserUpsertWithoutShoppingListsInput = {
    update: XOR<UserUpdateWithoutShoppingListsInput, UserUncheckedUpdateWithoutShoppingListsInput>
    create: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
  }

  export type UserUpdateWithoutShoppingListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUpdateManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUpdateManyWithoutUserInput
    comments?: CommentUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUpdateManyWithoutUserInput
    stats?: StatUpdateManyWithoutUserInput
    rewards?: KnorrRewardUpdateManyWithoutUserInput
    challenges?: UserChallengeUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutShoppingListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUncheckedUpdateManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUncheckedUpdateManyWithoutUserInput
    comments?: CommentUncheckedUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedUpdateManyWithoutUserInput
    stats?: StatUncheckedUpdateManyWithoutUserInput
    rewards?: KnorrRewardUncheckedUpdateManyWithoutUserInput
    challenges?: UserChallengeUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutFridgeItemsInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostCreateNestedManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    stats?: StatCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardCreateNestedManyWithoutUserInput
    challenges?: UserChallengeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFridgeItemsInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostUncheckedCreateNestedManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    stats?: StatUncheckedCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardUncheckedCreateNestedManyWithoutUserInput
    challenges?: UserChallengeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFridgeItemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFridgeItemsInput, UserUncheckedCreateWithoutFridgeItemsInput>
  }

  export type UserUpsertWithoutFridgeItemsInput = {
    update: XOR<UserUpdateWithoutFridgeItemsInput, UserUncheckedUpdateWithoutFridgeItemsInput>
    create: XOR<UserCreateWithoutFridgeItemsInput, UserUncheckedCreateWithoutFridgeItemsInput>
  }

  export type UserUpdateWithoutFridgeItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUpdateManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUpdateManyWithoutUserInput
    comments?: CommentUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserInput
    stats?: StatUpdateManyWithoutUserInput
    rewards?: KnorrRewardUpdateManyWithoutUserInput
    challenges?: UserChallengeUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutFridgeItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUncheckedUpdateManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUncheckedUpdateManyWithoutUserInput
    comments?: CommentUncheckedUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserInput
    stats?: StatUncheckedUpdateManyWithoutUserInput
    rewards?: KnorrRewardUncheckedUpdateManyWithoutUserInput
    challenges?: UserChallengeUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutStatsInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostCreateNestedManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardCreateNestedManyWithoutUserInput
    challenges?: UserChallengeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStatsInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostUncheckedCreateNestedManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardUncheckedCreateNestedManyWithoutUserInput
    challenges?: UserChallengeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStatsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStatsInput, UserUncheckedCreateWithoutStatsInput>
  }

  export type UserUpsertWithoutStatsInput = {
    update: XOR<UserUpdateWithoutStatsInput, UserUncheckedUpdateWithoutStatsInput>
    create: XOR<UserCreateWithoutStatsInput, UserUncheckedCreateWithoutStatsInput>
  }

  export type UserUpdateWithoutStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUpdateManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUpdateManyWithoutUserInput
    comments?: CommentUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUpdateManyWithoutUserInput
    rewards?: KnorrRewardUpdateManyWithoutUserInput
    challenges?: UserChallengeUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUncheckedUpdateManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUncheckedUpdateManyWithoutUserInput
    comments?: CommentUncheckedUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedUpdateManyWithoutUserInput
    rewards?: KnorrRewardUncheckedUpdateManyWithoutUserInput
    challenges?: UserChallengeUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutRewardsInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostCreateNestedManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemCreateNestedManyWithoutUserInput
    stats?: StatCreateNestedManyWithoutUserInput
    challenges?: UserChallengeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRewardsInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostUncheckedCreateNestedManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedCreateNestedManyWithoutUserInput
    stats?: StatUncheckedCreateNestedManyWithoutUserInput
    challenges?: UserChallengeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRewardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRewardsInput, UserUncheckedCreateWithoutRewardsInput>
  }

  export type UserUpsertWithoutRewardsInput = {
    update: XOR<UserUpdateWithoutRewardsInput, UserUncheckedUpdateWithoutRewardsInput>
    create: XOR<UserCreateWithoutRewardsInput, UserUncheckedCreateWithoutRewardsInput>
  }

  export type UserUpdateWithoutRewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUpdateManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUpdateManyWithoutUserInput
    comments?: CommentUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUpdateManyWithoutUserInput
    stats?: StatUpdateManyWithoutUserInput
    challenges?: UserChallengeUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutRewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUncheckedUpdateManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUncheckedUpdateManyWithoutUserInput
    comments?: CommentUncheckedUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedUpdateManyWithoutUserInput
    stats?: StatUncheckedUpdateManyWithoutUserInput
    challenges?: UserChallengeUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutChallengesInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostCreateNestedManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemCreateNestedManyWithoutUserInput
    stats?: StatCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChallengesInput = {
    id: string
    email: string
    password?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    country?: string | null
    dob?: Date | string | null
    allergies?: string | null
    preferences?: string | null
    dietStyle?: string | null
    productsToAvoid?: string | null
    budget?: number | null
    createdAt?: Date | string
    knorrPosts?: KnorrPostUncheckedCreateNestedManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedCreateNestedManyWithoutUserInput
    stats?: StatUncheckedCreateNestedManyWithoutUserInput
    rewards?: KnorrRewardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChallengesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChallengesInput, UserUncheckedCreateWithoutChallengesInput>
  }

  export type UserUpsertWithoutChallengesInput = {
    update: XOR<UserUpdateWithoutChallengesInput, UserUncheckedUpdateWithoutChallengesInput>
    create: XOR<UserCreateWithoutChallengesInput, UserUncheckedCreateWithoutChallengesInput>
  }

  export type UserUpdateWithoutChallengesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUpdateManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUpdateManyWithoutUserInput
    comments?: CommentUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUpdateManyWithoutUserInput
    stats?: StatUpdateManyWithoutUserInput
    rewards?: KnorrRewardUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutChallengesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    dietStyle?: NullableStringFieldUpdateOperationsInput | string | null
    productsToAvoid?: NullableStringFieldUpdateOperationsInput | string | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    knorrPosts?: KnorrPostUncheckedUpdateManyWithoutUserInput
    knorrUserProfiles?: KnorrUserProfileUncheckedUpdateManyWithoutUserInput
    comments?: CommentUncheckedUpdateManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserInput
    fridgeItems?: FridgeItemUncheckedUpdateManyWithoutUserInput
    stats?: StatUncheckedUpdateManyWithoutUserInput
    rewards?: KnorrRewardUncheckedUpdateManyWithoutUserInput
  }

  export type KnorrPostCreateManyUserInput = {
    id?: string
    content?: string | null
    imageUrl?: string | null
    imageMimeType?: string | null
    hashtags?: string | null
    knorrProducts?: string | null
    isRecipe?: boolean
    prepTime?: string | null
    cookTime?: string | null
    servings?: string | null
    difficulty?: string | null
    views?: number
    likes?: number
    shares?: number
    comments?: number
    createdAt?: Date | string
  }

  export type KnorrUserProfileCreateManyUserInput = {
    id?: string
    knorrLevel?: number
    knorrXP?: number
    rewardPoints?: number
    badges?: string | null
    followers?: string | null
    following?: string | null
    likedPosts?: string | null
    savedPosts?: string | null
    totalPosts?: number
    totalViews?: number
    totalLikes?: number
    totalComments?: number
    totalShares?: number
    createdAt?: Date | string
  }

  export type CommentCreateManyUserInput = {
    id?: string
    postId: string
    content: string
    createdAt?: Date | string
  }

  export type ShoppingListCreateManyUserInput = {
    id?: string
    items: string
  }

  export type FridgeItemCreateManyUserInput = {
    id?: string
    name: string
    quantity?: number
    expiryDate?: Date | string | null
    zone?: string | null
    category?: string | null
    addedAt?: Date | string
  }

  export type StatCreateManyUserInput = {
    id?: string
    data: string
  }

  export type KnorrRewardCreateManyUserInput = {
    id?: string
    name: string
  }

  export type UserChallengeCreateManyUserInput = {
    id?: string
    challenge: string
  }

  export type KnorrPostUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: NullableStringFieldUpdateOperationsInput | string | null
    knorrProducts?: NullableStringFieldUpdateOperationsInput | string | null
    isRecipe?: BoolFieldUpdateOperationsInput | boolean
    prepTime?: NullableStringFieldUpdateOperationsInput | string | null
    cookTime?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postComments?: CommentUpdateManyWithoutPostInput
  }

  export type KnorrPostUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: NullableStringFieldUpdateOperationsInput | string | null
    knorrProducts?: NullableStringFieldUpdateOperationsInput | string | null
    isRecipe?: BoolFieldUpdateOperationsInput | boolean
    prepTime?: NullableStringFieldUpdateOperationsInput | string | null
    cookTime?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postComments?: CommentUncheckedUpdateManyWithoutPostInput
  }

  export type KnorrPostUncheckedUpdateManyWithoutKnorrPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: NullableStringFieldUpdateOperationsInput | string | null
    knorrProducts?: NullableStringFieldUpdateOperationsInput | string | null
    isRecipe?: BoolFieldUpdateOperationsInput | boolean
    prepTime?: NullableStringFieldUpdateOperationsInput | string | null
    cookTime?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnorrUserProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    knorrLevel?: IntFieldUpdateOperationsInput | number
    knorrXP?: IntFieldUpdateOperationsInput | number
    rewardPoints?: IntFieldUpdateOperationsInput | number
    badges?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: NullableStringFieldUpdateOperationsInput | string | null
    following?: NullableStringFieldUpdateOperationsInput | string | null
    likedPosts?: NullableStringFieldUpdateOperationsInput | string | null
    savedPosts?: NullableStringFieldUpdateOperationsInput | string | null
    totalPosts?: IntFieldUpdateOperationsInput | number
    totalViews?: IntFieldUpdateOperationsInput | number
    totalLikes?: IntFieldUpdateOperationsInput | number
    totalComments?: IntFieldUpdateOperationsInput | number
    totalShares?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnorrUserProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    knorrLevel?: IntFieldUpdateOperationsInput | number
    knorrXP?: IntFieldUpdateOperationsInput | number
    rewardPoints?: IntFieldUpdateOperationsInput | number
    badges?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: NullableStringFieldUpdateOperationsInput | string | null
    following?: NullableStringFieldUpdateOperationsInput | string | null
    likedPosts?: NullableStringFieldUpdateOperationsInput | string | null
    savedPosts?: NullableStringFieldUpdateOperationsInput | string | null
    totalPosts?: IntFieldUpdateOperationsInput | number
    totalViews?: IntFieldUpdateOperationsInput | number
    totalLikes?: IntFieldUpdateOperationsInput | number
    totalComments?: IntFieldUpdateOperationsInput | number
    totalShares?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnorrUserProfileUncheckedUpdateManyWithoutKnorrUserProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    knorrLevel?: IntFieldUpdateOperationsInput | number
    knorrXP?: IntFieldUpdateOperationsInput | number
    rewardPoints?: IntFieldUpdateOperationsInput | number
    badges?: NullableStringFieldUpdateOperationsInput | string | null
    followers?: NullableStringFieldUpdateOperationsInput | string | null
    following?: NullableStringFieldUpdateOperationsInput | string | null
    likedPosts?: NullableStringFieldUpdateOperationsInput | string | null
    savedPosts?: NullableStringFieldUpdateOperationsInput | string | null
    totalPosts?: IntFieldUpdateOperationsInput | number
    totalViews?: IntFieldUpdateOperationsInput | number
    totalLikes?: IntFieldUpdateOperationsInput | number
    totalComments?: IntFieldUpdateOperationsInput | number
    totalShares?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: KnorrPostUpdateOneRequiredWithoutPostCommentsInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingListUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    items?: StringFieldUpdateOperationsInput | string
  }

  export type ShoppingListUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    items?: StringFieldUpdateOperationsInput | string
  }

  export type ShoppingListUncheckedUpdateManyWithoutShoppingListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    items?: StringFieldUpdateOperationsInput | string
  }

  export type FridgeItemUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    zone?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FridgeItemUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    zone?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FridgeItemUncheckedUpdateManyWithoutFridgeItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    zone?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type StatUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type StatUncheckedUpdateManyWithoutStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type KnorrRewardUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type KnorrRewardUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type KnorrRewardUncheckedUpdateManyWithoutRewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserChallengeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    challenge?: StringFieldUpdateOperationsInput | string
  }

  export type UserChallengeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    challenge?: StringFieldUpdateOperationsInput | string
  }

  export type UserChallengeUncheckedUpdateManyWithoutChallengesInput = {
    id?: StringFieldUpdateOperationsInput | string
    challenge?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateManyPostInput = {
    id?: string
    userId: string
    content: string
    createdAt?: Date | string
  }

  export type CommentUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsInput
  }

  export type CommentUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutPostCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}