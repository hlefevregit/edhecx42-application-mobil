datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())  // Ajouter @default(cuid())
  email         String    @unique
  password      String?
  displayName   String?
  avatarUrl     String?
  country       String?
  dob           DateTime?
  allergies     String?
  diet          String?
  location      String?
  pushNotif     Boolean   @default(true)
  promoNotif    Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  knorrPosts        KnorrPost[]
  knorrUserProfiles KnorrUserProfile[]
  comments          Comment[]
  shoppingLists     ShoppingList[]
  fridgeItems       FridgeItem[]
  stats             Stat[]
  rewards           KnorrReward[]
  challenges        UserChallenge[]
}

model KnorrPost {
  id             String    @id @default(cuid())
  userId         String
  content        String?
  imageUrl       String?
  imageMimeType  String?
  hashtags       String?
  knorrProducts  String?   // JSON
  isRecipe       Boolean   @default(false)
  prepTime       String?
  cookTime       String?
  servings       String?
  difficulty     String?
  
  // NOUVEAUX CHAMPS pour l'algorithme de feed
  dietType       String?   // "Vegan", "Vegetarian", "Paleo", "Keto", "Halal", etc.
  allergens      String?   // JSON array ["Gluten", "Dairy", "Nuts", ...]
  isAllergenFree Boolean   @default(false) // Si le plat est sans allergènes communs
  
  views          Int       @default(0)
  likes          Int       @default(0)
  shares         Int       @default(0)
  comments       Int       @default(0)
  createdAt      DateTime  @default(now())
  
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  postComments Comment[]
  
  @@index([userId])
  @@index([dietType]) // Index pour recherche rapide par régime
}

model KnorrUserProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  knorrLevel     Int      @default(1)
  knorrXP        Int      @default(0)
  rewardPoints   Int      @default(0)
  badges         String?  // JSON array
  followers      String?  // JSON array
  following      String?  // JSON array
  likedPosts     String?  // JSON array
  savedPosts     String?  // JSON array
  totalPosts     Int      @default(0)
  totalViews     Int      @default(0)
  totalLikes     Int      @default(0)
  totalComments  Int      @default(0)
  totalShares    Int      @default(0)
  createdAt      DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  
  post KnorrPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([postId])
  @@index([userId])
}

model ShoppingList {
  id      String @id @default(cuid())
  userId  String
  items   String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model FridgeItem {
  id         String    @id @default(cuid())
  userId     String
  name       String
  quantity   Int       @default(1)
  expiryDate DateTime?
  zone       String?
  category   String?
  addedAt    DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Stat {
  id      String @id @default(cuid())
  userId  String
  data    String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model KnorrReward {
  id      String @id @default(cuid())
  name    String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model UserChallenge {
  id        String @id @default(cuid())
  userId    String
  challenge String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}